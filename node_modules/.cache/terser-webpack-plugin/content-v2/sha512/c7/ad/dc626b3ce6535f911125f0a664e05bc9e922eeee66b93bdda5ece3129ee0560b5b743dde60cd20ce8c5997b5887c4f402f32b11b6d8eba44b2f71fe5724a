{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\"],\"mappings\":\"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,EAAAA,EAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,aAAA,CAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,UAAA,CAAyCT,YAAA,EAAAK,MAAAA,IACzC,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,GAAAA,EAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,QAIAlC,EAAAA,EAAAmC,EAAA\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"dist/\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 1);\\n\"]}","code":"!function(I){var g={};function C(Q){if(g[Q])return g[Q].exports;var F=g[Q]={i:Q,l:!1,exports:{}};return I[Q].call(F.exports,F,F.exports,C),F.l=!0,F.exports}C.m=I,C.c=g,C.d=function(I,g,Q){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:Q})},C.r=function(I){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(I,\"__esModule\",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&\"object\"==typeof I&&I&&I.__esModule)return I;var Q=Object.create(null);if(C.r(Q),Object.defineProperty(Q,\"default\",{enumerable:!0,value:I}),2&g&&\"string\"!=typeof I)for(var F in I)C.d(Q,F,function(g){return I[g]}.bind(null,F));return Q},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,\"a\",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p=\"dist/\",C(C.s=1)}([function(module,exports,__webpack_require__){eval(\"var __WEBPACK_AMD_DEFINE_RESULT__;/*!\\r\\n * fullPage 3.0.5\\r\\n * https://github.com/alvarotrigo/fullPage.js\\r\\n *\\r\\n * @license GPLv3 for open source use only\\r\\n * or Fullpage Commercial License for commercial use\\r\\n * http://alvarotrigo.com/fullPage/pricing/\\r\\n *\\r\\n * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo\\r\\n */\\n(function (root, window, document, factory, undefined) {\\n  if (true) {\\n    // AMD. Register as an anonymous module.\\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n      root.fullpage = factory(window, document);\\n      return root.fullpage;\\n    }).call(exports, __webpack_require__, exports, module),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  } else {}\\n})(this, window, document, function (window, document) {\\n  'use strict'; // keeping central set of classnames and selectors\\n\\n  var WRAPPER = 'fullpage-wrapper';\\n  var WRAPPER_SEL = '.' + WRAPPER; // slimscroll\\n\\n  var SCROLLABLE = 'fp-scrollable';\\n  var SCROLLABLE_SEL = '.' + SCROLLABLE; // util\\n\\n  var RESPONSIVE = 'fp-responsive';\\n  var NO_TRANSITION = 'fp-notransition';\\n  var DESTROYED = 'fp-destroyed';\\n  var ENABLED = 'fp-enabled';\\n  var VIEWING_PREFIX = 'fp-viewing';\\n  var ACTIVE = 'active';\\n  var ACTIVE_SEL = '.' + ACTIVE;\\n  var COMPLETELY = 'fp-completely';\\n  var COMPLETELY_SEL = '.' + COMPLETELY; // section\\n\\n  var SECTION_DEFAULT_SEL = '.section';\\n  var SECTION = 'fp-section';\\n  var SECTION_SEL = '.' + SECTION;\\n  var SECTION_ACTIVE_SEL = SECTION_SEL + ACTIVE_SEL;\\n  var TABLE_CELL = 'fp-tableCell';\\n  var TABLE_CELL_SEL = '.' + TABLE_CELL;\\n  var AUTO_HEIGHT = 'fp-auto-height';\\n  var AUTO_HEIGHT_SEL = '.' + AUTO_HEIGHT;\\n  var NORMAL_SCROLL = 'fp-normal-scroll';\\n  var NORMAL_SCROLL_SEL = '.' + NORMAL_SCROLL; // section nav\\n\\n  var SECTION_NAV = 'fp-nav';\\n  var SECTION_NAV_SEL = '#' + SECTION_NAV;\\n  var SECTION_NAV_TOOLTIP = 'fp-tooltip';\\n  var SECTION_NAV_TOOLTIP_SEL = '.' + SECTION_NAV_TOOLTIP;\\n  var SHOW_ACTIVE_TOOLTIP = 'fp-show-active'; // slide\\n\\n  var SLIDE_DEFAULT_SEL = '.slide';\\n  var SLIDE = 'fp-slide';\\n  var SLIDE_SEL = '.' + SLIDE;\\n  var SLIDE_ACTIVE_SEL = SLIDE_SEL + ACTIVE_SEL;\\n  var SLIDES_WRAPPER = 'fp-slides';\\n  var SLIDES_WRAPPER_SEL = '.' + SLIDES_WRAPPER;\\n  var SLIDES_CONTAINER = 'fp-slidesContainer';\\n  var SLIDES_CONTAINER_SEL = '.' + SLIDES_CONTAINER;\\n  var TABLE = 'fp-table'; // slide nav\\n\\n  var SLIDES_NAV = 'fp-slidesNav';\\n  var SLIDES_NAV_SEL = '.' + SLIDES_NAV;\\n  var SLIDES_NAV_LINK_SEL = SLIDES_NAV_SEL + ' a';\\n  var SLIDES_ARROW = 'fp-controlArrow';\\n  var SLIDES_ARROW_SEL = '.' + SLIDES_ARROW;\\n  var SLIDES_PREV = 'fp-prev';\\n  var SLIDES_PREV_SEL = '.' + SLIDES_PREV;\\n  var SLIDES_ARROW_PREV = SLIDES_ARROW + ' ' + SLIDES_PREV;\\n  var SLIDES_ARROW_PREV_SEL = SLIDES_ARROW_SEL + SLIDES_PREV_SEL;\\n  var SLIDES_NEXT = 'fp-next';\\n  var SLIDES_NEXT_SEL = '.' + SLIDES_NEXT;\\n  var SLIDES_ARROW_NEXT = SLIDES_ARROW + ' ' + SLIDES_NEXT;\\n  var SLIDES_ARROW_NEXT_SEL = SLIDES_ARROW_SEL + SLIDES_NEXT_SEL;\\n\\n  function initialise(containerSelector, options) {\\n    var isOK = options && new RegExp('([\\\\\\\\d\\\\\\\\w]{8}-){3}[\\\\\\\\d\\\\\\\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$').test(options['li' + 'cen' + 'seK' + 'e' + 'y']) || document.domain.indexOf('al' + 'varotri' + 'go' + '.' + 'com') > -1; //only once my friend!\\n\\n    if (hasClass($('html'), ENABLED)) {\\n      displayWarnings();\\n      return;\\n    } // common jQuery objects\\n\\n\\n    var $htmlBody = $('html, body');\\n    var $body = $('body')[0];\\n    var FP = {}; // Creating some defaults, extending them with any options that were provided\\n\\n    options = deepExtend({\\n      //navigation\\n      menu: false,\\n      anchors: [],\\n      lockAnchors: false,\\n      navigation: false,\\n      navigationPosition: 'right',\\n      navigationTooltips: [],\\n      showActiveTooltip: false,\\n      slidesNavigation: false,\\n      slidesNavPosition: 'bottom',\\n      scrollBar: false,\\n      hybrid: false,\\n      //scrolling\\n      css3: true,\\n      scrollingSpeed: 700,\\n      autoScrolling: true,\\n      fitToSection: true,\\n      fitToSectionDelay: 1000,\\n      easing: 'easeInOutCubic',\\n      easingcss3: 'ease',\\n      loopBottom: false,\\n      loopTop: false,\\n      loopHorizontal: true,\\n      continuousVertical: false,\\n      continuousHorizontal: false,\\n      scrollHorizontally: false,\\n      interlockedSlides: false,\\n      dragAndMove: false,\\n      offsetSections: false,\\n      resetSliders: false,\\n      fadingEffect: false,\\n      normalScrollElements: null,\\n      scrollOverflow: false,\\n      scrollOverflowReset: false,\\n      scrollOverflowHandler: window.fp_scrolloverflow ? window.fp_scrolloverflow.iscrollHandler : null,\\n      scrollOverflowOptions: null,\\n      touchSensitivity: 5,\\n      touchWrapper: typeof containerSelector === 'string' ? $(containerSelector)[0] : containerSelector,\\n      normalScrollElementTouchThreshold: 5,\\n      bigSectionsDestination: null,\\n      //Accessibility\\n      keyboardScrolling: true,\\n      animateAnchor: true,\\n      recordHistory: true,\\n      //design\\n      controlArrows: true,\\n      controlArrowColor: '#fff',\\n      verticalCentered: true,\\n      sectionsColor: [],\\n      paddingTop: 0,\\n      paddingBottom: 0,\\n      fixedElements: null,\\n      responsive: 0,\\n      //backwards compabitility with responsiveWiddth\\n      responsiveWidth: 0,\\n      responsiveHeight: 0,\\n      responsiveSlides: false,\\n      parallax: false,\\n      parallaxOptions: {\\n        type: 'reveal',\\n        percentage: 62,\\n        property: 'translate'\\n      },\\n      cards: false,\\n      cardsOptions: {\\n        perspective: 100,\\n        fadeContent: true,\\n        fadeBackground: true\\n      },\\n      //Custom selectors\\n      sectionSelector: SECTION_DEFAULT_SEL,\\n      slideSelector: SLIDE_DEFAULT_SEL,\\n      //events\\n      v2compatible: false,\\n      afterLoad: null,\\n      onLeave: null,\\n      afterRender: null,\\n      afterResize: null,\\n      afterReBuild: null,\\n      afterSlideLoad: null,\\n      onSlideLeave: null,\\n      afterResponsive: null,\\n      lazyLoading: true\\n    }, options); //flag to avoid very fast sliding for landscape sliders\\n\\n    var slideMoving = false;\\n    var isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);\\n    var isTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints > 0 || navigator.maxTouchPoints;\\n    var container = typeof containerSelector === 'string' ? $(containerSelector)[0] : containerSelector;\\n    var windowsHeight = getWindowHeight();\\n    var isResizing = false;\\n    var isWindowFocused = true;\\n    var lastScrolledDestiny;\\n    var lastScrolledSlide;\\n    var canScroll = true;\\n    var scrollings = [];\\n    var controlPressed;\\n    var startingSection;\\n    var isScrollAllowed = {};\\n    isScrollAllowed.m = {\\n      'up': true,\\n      'down': true,\\n      'left': true,\\n      'right': true\\n    };\\n    isScrollAllowed.k = deepExtend({}, isScrollAllowed.m);\\n    var MSPointer = getMSPointer();\\n    var events = {\\n      touchmove: 'ontouchmove' in window ? 'touchmove' : MSPointer.move,\\n      touchstart: 'ontouchstart' in window ? 'touchstart' : MSPointer.down\\n    };\\n    var scrollBarHandler; // taken from https://github.com/udacity/ud891/blob/gh-pages/lesson2-focus/07-modals-and-keyboard-traps/solution/modal.js\\n\\n    var focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\\\"0\\\"], [contenteditable]'; //cheks for passive event support\\n\\n    var g_supportsPassive = false;\\n\\n    try {\\n      var opts = Object.defineProperty({}, 'passive', {\\n        get: function () {\\n          g_supportsPassive = true;\\n        }\\n      });\\n      window.addEventListener(\\\"testPassive\\\", null, opts);\\n      window.removeEventListener(\\\"testPassive\\\", null, opts);\\n    } catch (e) {} //timeouts\\n\\n\\n    var resizeId;\\n    var afterSectionLoadsId;\\n    var afterSlideLoadsId;\\n    var scrollId;\\n    var scrollId2;\\n    var keydownId;\\n    var originals = deepExtend({}, options); //deep copy\\n\\n    var activeAnimation;\\n    var g_initialAnchorsInDom = false;\\n    var g_canFireMouseEnterNormalScroll = true;\\n    displayWarnings(); //easeInOutCubic animation included in the plugin\\n\\n    window.fp_easings = deepExtend(window.fp_easings, {\\n      easeInOutCubic: function (t, b, c, d) {\\n        if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\\n      }\\n    });\\n    /**\\r\\n    * Sets the autoScroll option.\\r\\n    * It changes the scroll bar visibility and the history of the site as a result.\\r\\n    */\\n\\n    function setAutoScrolling(value, type) {\\n      //removing the transformation\\n      if (!value) {\\n        silentScroll(0);\\n      }\\n\\n      setVariableState('autoScrolling', value, type);\\n      var element = $(SECTION_ACTIVE_SEL)[0];\\n\\n      if (options.autoScrolling && !options.scrollBar) {\\n        css($htmlBody, {\\n          'overflow': 'hidden',\\n          'height': '100%'\\n        });\\n        setRecordHistory(originals.recordHistory, 'internal'); //for IE touch devices\\n\\n        css(container, {\\n          '-ms-touch-action': 'none',\\n          'touch-action': 'none'\\n        });\\n\\n        if (element != null) {\\n          //moving the container up\\n          silentScroll(element.offsetTop);\\n        }\\n      } else {\\n        css($htmlBody, {\\n          'overflow': 'visible',\\n          'height': 'initial'\\n        });\\n        var recordHistory = !options.autoScrolling ? false : originals.recordHistory;\\n        setRecordHistory(recordHistory, 'internal'); //for IE touch devices\\n\\n        css(container, {\\n          '-ms-touch-action': '',\\n          'touch-action': ''\\n        }); //scrolling the page to the section with no animation\\n\\n        if (element != null) {\\n          var scrollSettings = getScrollSettings(element.offsetTop);\\n          scrollSettings.element.scrollTo(0, scrollSettings.options);\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Defines wheter to record the history for each hash change in the URL.\\r\\n    */\\n\\n\\n    function setRecordHistory(value, type) {\\n      setVariableState('recordHistory', value, type);\\n    }\\n    /**\\r\\n    * Defines the scrolling speed\\r\\n    */\\n\\n\\n    function setScrollingSpeed(value, type) {\\n      setVariableState('scrollingSpeed', value, type);\\n    }\\n    /**\\r\\n    * Sets fitToSection\\r\\n    */\\n\\n\\n    function setFitToSection(value, type) {\\n      setVariableState('fitToSection', value, type);\\n    }\\n    /**\\r\\n    * Sets lockAnchors\\r\\n    */\\n\\n\\n    function setLockAnchors(value) {\\n      options.lockAnchors = value;\\n    }\\n    /**\\r\\n    * Adds or remove the possibility of scrolling through sections by using the mouse wheel or the trackpad.\\r\\n    */\\n\\n\\n    function setMouseWheelScrolling(value) {\\n      if (value) {\\n        addMouseWheelHandler();\\n        addMiddleWheelHandler();\\n      } else {\\n        removeMouseWheelHandler();\\n        removeMiddleWheelHandler();\\n      }\\n    }\\n    /**\\r\\n    * Adds or remove the possibility of scrolling through sections by using the mouse wheel/trackpad or touch gestures.\\r\\n    * Optionally a second parameter can be used to specify the direction for which the action will be applied.\\r\\n    *\\r\\n    * @param directions string containing the direction or directions separated by comma.\\r\\n    */\\n\\n\\n    function setAllowScrolling(value, directions) {\\n      if (typeof directions !== 'undefined') {\\n        directions = directions.replace(/ /g, '').split(',');\\n        directions.forEach(function (direction) {\\n          setIsScrollAllowed(value, direction, 'm');\\n        });\\n      } else {\\n        setIsScrollAllowed(value, 'all', 'm');\\n      }\\n    }\\n    /**\\r\\n    * Adds or remove the mouse wheel hijacking\\r\\n    */\\n\\n\\n    function setMouseHijack(value) {\\n      if (value) {\\n        setMouseWheelScrolling(true);\\n        addTouchHandler();\\n      } else {\\n        setMouseWheelScrolling(false);\\n        removeTouchHandler();\\n      }\\n    }\\n    /**\\r\\n    * Adds or remove the possibility of scrolling through sections by using the keyboard arrow keys\\r\\n    */\\n\\n\\n    function setKeyboardScrolling(value, directions) {\\n      if (typeof directions !== 'undefined') {\\n        directions = directions.replace(/ /g, '').split(',');\\n        directions.forEach(function (direction) {\\n          setIsScrollAllowed(value, direction, 'k');\\n        });\\n      } else {\\n        setIsScrollAllowed(value, 'all', 'k');\\n        options.keyboardScrolling = value;\\n      }\\n    }\\n    /**\\r\\n    * Moves the page up one section.\\r\\n    */\\n\\n\\n    function moveSectionUp() {\\n      var prev = prevUntil($(SECTION_ACTIVE_SEL)[0], SECTION_SEL); //looping to the bottom if there's no more sections above\\n\\n      if (!prev && (options.loopTop || options.continuousVertical)) {\\n        prev = last($(SECTION_SEL));\\n      }\\n\\n      if (prev != null) {\\n        scrollPage(prev, null, true);\\n      }\\n    }\\n    /**\\r\\n    * Moves the page down one section.\\r\\n    */\\n\\n\\n    function moveSectionDown() {\\n      var next = nextUntil($(SECTION_ACTIVE_SEL)[0], SECTION_SEL); //looping to the top if there's no more sections below\\n\\n      if (!next && (options.loopBottom || options.continuousVertical)) {\\n        next = $(SECTION_SEL)[0];\\n      }\\n\\n      if (next != null) {\\n        scrollPage(next, null, false);\\n      }\\n    }\\n    /**\\r\\n    * Moves the page to the given section and slide with no animation.\\r\\n    * Anchors or index positions can be used as params.\\r\\n    */\\n\\n\\n    function silentMoveTo(sectionAnchor, slideAnchor) {\\n      setScrollingSpeed(0, 'internal');\\n      moveTo(sectionAnchor, slideAnchor);\\n      setScrollingSpeed(originals.scrollingSpeed, 'internal');\\n    }\\n    /**\\r\\n    * Moves the page to the given section and slide.\\r\\n    * Anchors or index positions can be used as params.\\r\\n    */\\n\\n\\n    function moveTo(sectionAnchor, slideAnchor) {\\n      var destiny = getSectionByAnchor(sectionAnchor);\\n\\n      if (typeof slideAnchor !== 'undefined') {\\n        scrollPageAndSlide(sectionAnchor, slideAnchor);\\n      } else if (destiny != null) {\\n        scrollPage(destiny);\\n      }\\n    }\\n    /**\\r\\n    * Slides right the slider of the active section.\\r\\n    * Optional `section` param.\\r\\n    */\\n\\n\\n    function moveSlideRight(section) {\\n      moveSlide('right', section);\\n    }\\n    /**\\r\\n    * Slides left the slider of the active section.\\r\\n    * Optional `section` param.\\r\\n    */\\n\\n\\n    function moveSlideLeft(section) {\\n      moveSlide('left', section);\\n    }\\n    /**\\r\\n     * When resizing is finished, we adjust the slides sizes and positions\\r\\n     */\\n\\n\\n    function reBuild(resizing) {\\n      if (hasClass(container, DESTROYED)) {\\n        return;\\n      } //nothing to do if the plugin was destroyed\\n\\n\\n      isResizing = true;\\n      windowsHeight = getWindowHeight(); //updating global var\\n\\n      var sections = $(SECTION_SEL);\\n\\n      for (var i = 0; i < sections.length; ++i) {\\n        var section = sections[i];\\n        var slidesWrap = $(SLIDES_WRAPPER_SEL, section)[0];\\n        var slides = $(SLIDE_SEL, section); //adjusting the height of the table-cell for IE and Firefox\\n\\n        if (options.verticalCentered) {\\n          css($(TABLE_CELL_SEL, section), {\\n            'height': getTableHeight(section) + 'px'\\n          });\\n        }\\n\\n        css(section, {\\n          'height': windowsHeight + 'px'\\n        }); //adjusting the position fo the FULL WIDTH slides...\\n\\n        if (slides.length > 1) {\\n          landscapeScroll(slidesWrap, $(SLIDE_ACTIVE_SEL, slidesWrap)[0]);\\n        }\\n      }\\n\\n      if (options.scrollOverflow) {\\n        scrollBarHandler.createScrollBarForAll();\\n      }\\n\\n      var activeSection = $(SECTION_ACTIVE_SEL)[0];\\n      var sectionIndex = index(activeSection, SECTION_SEL); //isn't it the first section?\\n\\n      if (sectionIndex) {\\n        //adjusting the position for the current section\\n        silentMoveTo(sectionIndex + 1);\\n      }\\n\\n      isResizing = false;\\n\\n      if (isFunction(options.afterResize) && resizing) {\\n        options.afterResize.call(container, window.innerWidth, window.innerHeight);\\n      }\\n\\n      if (isFunction(options.afterReBuild) && !resizing) {\\n        options.afterReBuild.call(container);\\n      }\\n    }\\n    /**\\r\\n    * Turns fullPage.js to normal scrolling mode when the viewport `width` or `height`\\r\\n    * are smaller than the set limit values.\\r\\n    */\\n\\n\\n    function setResponsive(active) {\\n      var isResponsive = hasClass($body, RESPONSIVE);\\n\\n      if (active) {\\n        if (!isResponsive) {\\n          setAutoScrolling(false, 'internal');\\n          setFitToSection(false, 'internal');\\n          hide($(SECTION_NAV_SEL));\\n          addClass($body, RESPONSIVE);\\n\\n          if (isFunction(options.afterResponsive)) {\\n            options.afterResponsive.call(container, active);\\n          } //when on page load, we will remove scrolloverflow if necessary\\n\\n\\n          if (options.scrollOverflow) {\\n            scrollBarHandler.createScrollBarForAll();\\n          }\\n        }\\n      } else if (isResponsive) {\\n        setAutoScrolling(originals.autoScrolling, 'internal');\\n        setFitToSection(originals.autoScrolling, 'internal');\\n        show($(SECTION_NAV_SEL));\\n        removeClass($body, RESPONSIVE);\\n\\n        if (isFunction(options.afterResponsive)) {\\n          options.afterResponsive.call(container, active);\\n        }\\n      }\\n    }\\n\\n    if (container) {\\n      //public functions\\n      FP.version = '3.0.5';\\n      FP.setAutoScrolling = setAutoScrolling;\\n      FP.setRecordHistory = setRecordHistory;\\n      FP.setScrollingSpeed = setScrollingSpeed;\\n      FP.setFitToSection = setFitToSection;\\n      FP.setLockAnchors = setLockAnchors;\\n      FP.setMouseWheelScrolling = setMouseWheelScrolling;\\n      FP.setAllowScrolling = setAllowScrolling;\\n      FP.setKeyboardScrolling = setKeyboardScrolling;\\n      FP.moveSectionUp = moveSectionUp;\\n      FP.moveSectionDown = moveSectionDown;\\n      FP.silentMoveTo = silentMoveTo;\\n      FP.moveTo = moveTo;\\n      FP.moveSlideRight = moveSlideRight;\\n      FP.moveSlideLeft = moveSlideLeft;\\n      FP.fitToSection = fitToSection;\\n      FP.reBuild = reBuild;\\n      FP.setResponsive = setResponsive;\\n\\n      FP.getFullpageData = function () {\\n        return options;\\n      };\\n\\n      FP.destroy = destroy;\\n      FP.getActiveSection = getActiveSection;\\n      FP.getActiveSlide = getActiveSlide;\\n      FP.test = {\\n        top: '0px',\\n        translate3d: 'translate3d(0px, 0px, 0px)',\\n        translate3dH: function () {\\n          var a = [];\\n\\n          for (var i = 0; i < $(options.sectionSelector, container).length; i++) {\\n            a.push('translate3d(0px, 0px, 0px)');\\n          }\\n\\n          return a;\\n        }(),\\n        left: function () {\\n          var a = [];\\n\\n          for (var i = 0; i < $(options.sectionSelector, container).length; i++) {\\n            a.push(0);\\n          }\\n\\n          return a;\\n        }(),\\n        options: options,\\n        setAutoScrolling: setAutoScrolling\\n      }; //functions we want to share across files but which are not\\n      //mean to be used on their own by developers\\n\\n      FP.shared = {\\n        afterRenderActions: afterRenderActions\\n      };\\n      window.fullpage_api = FP; //using jQuery initialization? Creating the $.fn.fullpage object\\n\\n      if (options.$) {\\n        options.$.fn.fullpage = FP;\\n      }\\n\\n      init();\\n      bindEvents();\\n    }\\n\\n    function init() {\\n      //if css3 is not supported, it will use jQuery animations\\n      if (options.css3) {\\n        options.css3 = support3d();\\n      }\\n\\n      options.scrollBar = options.scrollBar || options.hybrid;\\n      setOptionsFromDOM();\\n      prepareDom();\\n      setAllowScrolling(true);\\n      setMouseHijack(true);\\n      setAutoScrolling(options.autoScrolling, 'internal');\\n      responsive(); //setting the class for the body element\\n\\n      setBodyClass();\\n\\n      if (document.readyState === 'complete') {\\n        scrollToAnchor();\\n      }\\n\\n      window.addEventListener('load', scrollToAnchor); //if we use scrollOverflow we'll fire afterRender in the scrolloverflow file\\n\\n      if (!options.scrollOverflow) {\\n        afterRenderActions();\\n      }\\n    }\\n\\n    function bindEvents() {\\n      //when scrolling...\\n      window.addEventListener('scroll', scrollHandler); //detecting any change on the URL to scroll to the given anchor link\\n      //(a way to detect back history button as we play with the hashes on the URL)\\n\\n      window.addEventListener('hashchange', hashChangeHandler); //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.\\n\\n      window.addEventListener('blur', blurHandler); //when resizing the site, we adjust the heights of the sections, slimScroll...\\n\\n      window.addEventListener('resize', resizeHandler); //Sliding with arrow keys, both, vertical and horizontal\\n\\n      document.addEventListener('keydown', keydownHandler); //to prevent scrolling while zooming\\n\\n      document.addEventListener('keyup', keyUpHandler); //Scrolls to the section when clicking the navigation bullet\\n      //simulating the jQuery .on('click') event using delegation\\n\\n      ['click', 'touchstart'].forEach(function (eventName) {\\n        document.addEventListener(eventName, delegatedEvents);\\n      });\\n      /**\\r\\n      * Applying normalScroll elements.\\r\\n      * Ignoring the scrolls over the specified selectors.\\r\\n      */\\n\\n      if (options.normalScrollElements) {\\n        ['mouseenter', 'touchstart'].forEach(function (eventName) {\\n          forMouseLeaveOrTouch(eventName, false);\\n        });\\n        ['mouseleave', 'touchend'].forEach(function (eventName) {\\n          forMouseLeaveOrTouch(eventName, true);\\n        });\\n      }\\n    }\\n\\n    function delegatedEvents(e) {\\n      var target = e.target;\\n\\n      if (target && closest(target, SECTION_NAV_SEL + ' a')) {\\n        sectionBulletHandler.call(target, e);\\n      } else if (matches(target, SECTION_NAV_TOOLTIP_SEL)) {\\n        tooltipTextHandler.call(target);\\n      } else if (matches(target, SLIDES_ARROW_SEL)) {\\n        slideArrowHandler.call(target, e);\\n      } else if (matches(target, SLIDES_NAV_LINK_SEL) || closest(target, SLIDES_NAV_LINK_SEL) != null) {\\n        slideBulletHandler.call(target, e);\\n      } else if (closest(target, options.menu + ' [data-menuanchor]')) {\\n        menuItemsHandler.call(target, e);\\n      }\\n    }\\n\\n    function forMouseLeaveOrTouch(eventName, allowScrolling) {\\n      //a way to pass arguments to the onMouseEnterOrLeave function\\n      document['fp_' + eventName] = allowScrolling;\\n      document.addEventListener(eventName, onMouseEnterOrLeave, true); //capturing phase\\n    }\\n\\n    function onMouseEnterOrLeave(e) {\\n      if (e.target == document) {\\n        return;\\n      }\\n\\n      if (e.type === 'touchend') {\\n        g_canFireMouseEnterNormalScroll = false;\\n        setTimeout(function () {\\n          g_canFireMouseEnterNormalScroll = true;\\n        }, 800);\\n      } //preventing mouseenter event to do anything when coming from a touchEnd event\\n      //fixing issue #3576\\n\\n\\n      if (e.type === 'mouseenter' && !g_canFireMouseEnterNormalScroll) {\\n        return;\\n      }\\n\\n      var normalSelectors = options.normalScrollElements.split(',');\\n      normalSelectors.forEach(function (normalSelector) {\\n        if (closest(e.target, normalSelector) != null) {\\n          setMouseHijack(document['fp_' + e.type]); //e.type = eventName\\n        }\\n      });\\n    }\\n    /**\\r\\n    * Setting options from DOM elements if they are not provided.\\r\\n    */\\n\\n\\n    function setOptionsFromDOM() {\\n      //no anchors option? Checking for them in the DOM attributes\\n      if (!options.anchors.length) {\\n        var attrName = '[data-anchor]';\\n        var anchors = $(options.sectionSelector.split(',').join(attrName + ',') + attrName, container);\\n\\n        if (anchors.length) {\\n          g_initialAnchorsInDom = true;\\n          anchors.forEach(function (item) {\\n            options.anchors.push(item.getAttribute('data-anchor').toString());\\n          });\\n        }\\n      } //no tooltips option? Checking for them in the DOM attributes\\n\\n\\n      if (!options.navigationTooltips.length) {\\n        var attrName = '[data-tooltip]';\\n        var tooltips = $(options.sectionSelector.split(',').join(attrName + ',') + attrName, container);\\n\\n        if (tooltips.length) {\\n          tooltips.forEach(function (item) {\\n            options.navigationTooltips.push(item.getAttribute('data-tooltip').toString());\\n          });\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Works over the DOM structure to set it up for the current fullpage options.\\r\\n    */\\n\\n\\n    function prepareDom() {\\n      css(container, {\\n        'height': '100%',\\n        'position': 'relative'\\n      }); //adding a class to recognize the container internally in the code\\n\\n      addClass(container, WRAPPER);\\n      addClass($('html'), ENABLED); //due to https://github.com/alvarotrigo/fullPage.js/issues/1502\\n\\n      windowsHeight = getWindowHeight();\\n      removeClass(container, DESTROYED); //in case it was destroyed before initializing it again\\n\\n      addInternalSelectors();\\n      var sections = $(SECTION_SEL); //styling the sections / slides / menu\\n\\n      for (var i = 0; i < sections.length; i++) {\\n        var sectionIndex = i;\\n        var section = sections[i];\\n        var slides = $(SLIDE_SEL, section);\\n        var numSlides = slides.length; //caching the original styles to add them back on destroy('all')\\n\\n        section.setAttribute('data-fp-styles', section.getAttribute('style'));\\n        styleSection(section, sectionIndex);\\n        styleMenu(section, sectionIndex); // if there's any slide\\n\\n        if (numSlides > 0) {\\n          styleSlides(section, slides, numSlides);\\n        } else {\\n          if (options.verticalCentered) {\\n            addTableClass(section);\\n          }\\n        }\\n      } //fixed elements need to be moved out of the plugin container due to problems with CSS3.\\n\\n\\n      if (options.fixedElements && options.css3) {\\n        $(options.fixedElements).forEach(function (item) {\\n          $body.appendChild(item);\\n        });\\n      } //vertical centered of the navigation + active bullet\\n\\n\\n      if (options.navigation) {\\n        addVerticalNavigation();\\n      }\\n\\n      enableYoutubeAPI();\\n\\n      if (options.scrollOverflow) {\\n        scrollBarHandler = options.scrollOverflowHandler.init(options);\\n      }\\n    }\\n    /**\\r\\n    * Styles the horizontal slides for a section.\\r\\n    */\\n\\n\\n    function styleSlides(section, slides, numSlides) {\\n      var sliderWidth = numSlides * 100;\\n      var slideWidth = 100 / numSlides;\\n      var slidesWrapper = document.createElement('div');\\n      slidesWrapper.className = SLIDES_WRAPPER; //fp-slides\\n\\n      wrapAll(slides, slidesWrapper);\\n      var slidesContainer = document.createElement('div');\\n      slidesContainer.className = SLIDES_CONTAINER; //fp-slidesContainer\\n\\n      wrapAll(slides, slidesContainer);\\n      css($(SLIDES_CONTAINER_SEL, section), {\\n        'width': sliderWidth + '%'\\n      });\\n\\n      if (numSlides > 1) {\\n        if (options.controlArrows) {\\n          createSlideArrows(section);\\n        }\\n\\n        if (options.slidesNavigation) {\\n          addSlidesNavigation(section, numSlides);\\n        }\\n      }\\n\\n      slides.forEach(function (slide) {\\n        css(slide, {\\n          'width': slideWidth + '%'\\n        });\\n\\n        if (options.verticalCentered) {\\n          addTableClass(slide);\\n        }\\n      });\\n      var startingSlide = $(SLIDE_ACTIVE_SEL, section)[0]; //if the slide won't be an starting point, the default will be the first one\\n      //the active section isn't the first one? Is not the first slide of the first section? Then we load that section/slide by default.\\n\\n      if (startingSlide != null && (index($(SECTION_ACTIVE_SEL), SECTION_SEL) !== 0 || index($(SECTION_ACTIVE_SEL), SECTION_SEL) === 0 && index(startingSlide) !== 0)) {\\n        silentLandscapeScroll(startingSlide, 'internal');\\n      } else {\\n        addClass(slides[0], ACTIVE);\\n      }\\n    }\\n    /**\\r\\n    * Styling vertical sections\\r\\n    */\\n\\n\\n    function styleSection(section, index) {\\n      //if no active section is defined, the 1st one will be the default one\\n      if (!index && $(SECTION_ACTIVE_SEL)[0] == null) {\\n        addClass(section, ACTIVE);\\n      }\\n\\n      startingSection = $(SECTION_ACTIVE_SEL)[0];\\n      css(section, {\\n        'height': windowsHeight + 'px'\\n      });\\n\\n      if (options.paddingTop) {\\n        css(section, {\\n          'padding-top': options.paddingTop\\n        });\\n      }\\n\\n      if (options.paddingBottom) {\\n        css(section, {\\n          'padding-bottom': options.paddingBottom\\n        });\\n      }\\n\\n      if (typeof options.sectionsColor[index] !== 'undefined') {\\n        css(section, {\\n          'background-color': options.sectionsColor[index]\\n        });\\n      }\\n\\n      if (typeof options.anchors[index] !== 'undefined') {\\n        section.setAttribute('data-anchor', options.anchors[index]);\\n      }\\n    }\\n    /**\\r\\n    * Sets the data-anchor attributes to the menu elements and activates the current one.\\r\\n    */\\n\\n\\n    function styleMenu(section, index) {\\n      if (typeof options.anchors[index] !== 'undefined') {\\n        //activating the menu / nav element on load\\n        if (hasClass(section, ACTIVE)) {\\n          activateMenuAndNav(options.anchors[index], index);\\n        }\\n      } //moving the menu outside the main container if it is inside (avoid problems with fixed positions when using CSS3 tranforms)\\n\\n\\n      if (options.menu && options.css3 && closest($(options.menu)[0], WRAPPER_SEL) != null) {\\n        $(options.menu).forEach(function (menu) {\\n          $body.appendChild(menu);\\n        });\\n      }\\n    }\\n    /**\\r\\n    * Adds internal classes to be able to provide customizable selectors\\r\\n    * keeping the link with the style sheet.\\r\\n    */\\n\\n\\n    function addInternalSelectors() {\\n      addClass($(options.sectionSelector, container), SECTION);\\n      addClass($(options.slideSelector, container), SLIDE);\\n    }\\n    /**\\r\\n    * Creates the control arrows for the given section\\r\\n    */\\n\\n\\n    function createSlideArrows(section) {\\n      var arrows = [createElementFromHTML('<div class=\\\"' + SLIDES_ARROW_PREV + '\\\"></div>'), createElementFromHTML('<div class=\\\"' + SLIDES_ARROW_NEXT + '\\\"></div>')];\\n      after($(SLIDES_WRAPPER_SEL, section)[0], arrows);\\n\\n      if (options.controlArrowColor !== '#fff') {\\n        css($(SLIDES_ARROW_NEXT_SEL, section), {\\n          'border-color': 'transparent transparent transparent ' + options.controlArrowColor\\n        });\\n        css($(SLIDES_ARROW_PREV_SEL, section), {\\n          'border-color': 'transparent ' + options.controlArrowColor + ' transparent transparent'\\n        });\\n      }\\n\\n      if (!options.loopHorizontal) {\\n        hide($(SLIDES_ARROW_PREV_SEL, section));\\n      }\\n    }\\n    /**\\r\\n    * Creates a vertical navigation bar.\\r\\n    */\\n\\n\\n    function addVerticalNavigation() {\\n      var navigation = document.createElement('div');\\n      navigation.setAttribute('id', SECTION_NAV);\\n      var divUl = document.createElement('ul');\\n      navigation.appendChild(divUl);\\n      appendTo(navigation, $body);\\n      var nav = $(SECTION_NAV_SEL)[0];\\n      addClass(nav, 'fp-' + options.navigationPosition);\\n\\n      if (options.showActiveTooltip) {\\n        addClass(nav, SHOW_ACTIVE_TOOLTIP);\\n      }\\n\\n      var li = '';\\n\\n      for (var i = 0; i < $(SECTION_SEL).length; i++) {\\n        var link = '';\\n\\n        if (options.anchors.length) {\\n          link = options.anchors[i];\\n        }\\n\\n        li += '<li><a href=\\\"#' + link + '\\\"><span class=\\\"fp-sr-only\\\">' + getBulletLinkName(i, 'Section') + '</span><span></span></a>'; // Only add tooltip if needed (defined by user)\\n\\n        var tooltip = options.navigationTooltips[i];\\n\\n        if (typeof tooltip !== 'undefined' && tooltip !== '') {\\n          li += '<div class=\\\"' + SECTION_NAV_TOOLTIP + ' fp-' + options.navigationPosition + '\\\">' + tooltip + '</div>';\\n        }\\n\\n        li += '</li>';\\n      }\\n\\n      $('ul', nav)[0].innerHTML = li; //centering it vertically\\n\\n      css($(SECTION_NAV_SEL), {\\n        'margin-top': '-' + $(SECTION_NAV_SEL)[0].offsetHeight / 2 + 'px'\\n      }); //activating the current active section\\n\\n      var bullet = $('li', $(SECTION_NAV_SEL)[0])[index($(SECTION_ACTIVE_SEL)[0], SECTION_SEL)];\\n      addClass($('a', bullet), ACTIVE);\\n    }\\n    /**\\r\\n    * Gets the name for screen readers for a section/slide navigation bullet.\\r\\n    */\\n\\n\\n    function getBulletLinkName(i, defaultName) {\\n      return options.navigationTooltips[i] || options.anchors[i] || defaultName + ' ' + (i + 1);\\n    }\\n    /*\\r\\n    * Enables the Youtube videos API so we can control their flow if necessary.\\r\\n    */\\n\\n\\n    function enableYoutubeAPI() {\\n      $('iframe[src*=\\\"youtube.com/embed/\\\"]', container).forEach(function (item) {\\n        addURLParam(item, 'enablejsapi=1');\\n      });\\n    }\\n    /**\\r\\n    * Adds a new parameter and its value to the `src` of a given element\\r\\n    */\\n\\n\\n    function addURLParam(element, newParam) {\\n      var originalSrc = element.getAttribute('src');\\n      element.setAttribute('src', originalSrc + getUrlParamSign(originalSrc) + newParam);\\n    }\\n    /*\\r\\n    * Returns the prefix sign to use for a new parameter in an existen URL.\\r\\n    *\\r\\n    * @return {String}  ? | &\\r\\n    */\\n\\n\\n    function getUrlParamSign(url) {\\n      return !/\\\\?/.test(url) ? '?' : '&';\\n    }\\n    /**\\r\\n    * Actions and callbacks to fire afterRender\\r\\n    */\\n\\n\\n    function afterRenderActions() {\\n      var section = $(SECTION_ACTIVE_SEL)[0];\\n      addClass(section, COMPLETELY);\\n      lazyLoad(section);\\n      playMedia(section);\\n\\n      if (options.scrollOverflow) {\\n        options.scrollOverflowHandler.afterLoad();\\n      }\\n\\n      if (isDestinyTheStartingSection() && isFunction(options.afterLoad)) {\\n        fireCallback('afterLoad', {\\n          activeSection: null,\\n          element: section,\\n          direction: null,\\n          //for backwards compatibility callback (to be removed in a future!)\\n          anchorLink: section.getAttribute('data-anchor'),\\n          sectionIndex: index(section, SECTION_SEL)\\n        });\\n      }\\n\\n      if (isFunction(options.afterRender)) {\\n        fireCallback('afterRender');\\n      }\\n    }\\n    /**\\r\\n    * Determines if the URL anchor destiny is the starting section (the one using 'active' class before initialization)\\r\\n    */\\n\\n\\n    function isDestinyTheStartingSection() {\\n      var destinationSection = getSectionByAnchor(getAnchorsURL().section);\\n      return !destinationSection || typeof destinationSection !== 'undefined' && index(destinationSection) === index(startingSection);\\n    }\\n\\n    var isScrolling = false;\\n    var lastScroll = 0; //when scrolling...\\n\\n    function scrollHandler() {\\n      var currentSection;\\n\\n      if (!options.autoScrolling || options.scrollBar) {\\n        var currentScroll = getScrollTop();\\n        var scrollDirection = getScrollDirection(currentScroll);\\n        var visibleSectionIndex = 0;\\n        var screen_mid = currentScroll + getWindowHeight() / 2.0;\\n        var isAtBottom = $body.offsetHeight - getWindowHeight() === currentScroll;\\n        var sections = $(SECTION_SEL); //when using `auto-height` for a small last section it won't be centered in the viewport\\n\\n        if (isAtBottom) {\\n          visibleSectionIndex = sections.length - 1;\\n        } //is at top? when using `auto-height` for a small first section it won't be centered in the viewport\\n        else if (!currentScroll) {\\n            visibleSectionIndex = 0;\\n          } //taking the section which is showing more content in the viewport\\n          else {\\n              for (var i = 0; i < sections.length; ++i) {\\n                var section = sections[i]; // Pick the the last section which passes the middle line of the screen.\\n\\n                if (section.offsetTop <= screen_mid) {\\n                  visibleSectionIndex = i;\\n                }\\n              }\\n            }\\n\\n        if (isCompletelyInViewPort(scrollDirection)) {\\n          if (!hasClass($(SECTION_ACTIVE_SEL)[0], COMPLETELY)) {\\n            addClass($(SECTION_ACTIVE_SEL)[0], COMPLETELY);\\n            removeClass(siblings($(SECTION_ACTIVE_SEL)[0]), COMPLETELY);\\n          }\\n        } //geting the last one, the current one on the screen\\n\\n\\n        currentSection = sections[visibleSectionIndex]; //setting the visible section as active when manually scrolling\\n        //executing only once the first time we reach the section\\n\\n        if (!hasClass(currentSection, ACTIVE)) {\\n          isScrolling = true;\\n          var leavingSection = $(SECTION_ACTIVE_SEL)[0];\\n          var leavingSectionIndex = index(leavingSection, SECTION_SEL) + 1;\\n          var yMovement = getYmovement(currentSection);\\n          var anchorLink = currentSection.getAttribute('data-anchor');\\n          var sectionIndex = index(currentSection, SECTION_SEL) + 1;\\n          var activeSlide = $(SLIDE_ACTIVE_SEL, currentSection)[0];\\n          var slideIndex;\\n          var slideAnchorLink;\\n          var callbacksParams = {\\n            activeSection: leavingSection,\\n            sectionIndex: sectionIndex - 1,\\n            anchorLink: anchorLink,\\n            element: currentSection,\\n            leavingSection: leavingSectionIndex,\\n            direction: yMovement\\n          };\\n\\n          if (activeSlide) {\\n            slideAnchorLink = activeSlide.getAttribute('data-anchor');\\n            slideIndex = index(activeSlide);\\n          }\\n\\n          if (canScroll) {\\n            addClass(currentSection, ACTIVE);\\n            removeClass(siblings(currentSection), ACTIVE);\\n\\n            if (isFunction(options.onLeave)) {\\n              fireCallback('onLeave', callbacksParams);\\n            }\\n\\n            if (isFunction(options.afterLoad)) {\\n              fireCallback('afterLoad', callbacksParams);\\n            }\\n\\n            stopMedia(leavingSection);\\n            lazyLoad(currentSection);\\n            playMedia(currentSection);\\n            activateMenuAndNav(anchorLink, sectionIndex - 1);\\n\\n            if (options.anchors.length) {\\n              //needed to enter in hashChange event when using the menu with anchor links\\n              lastScrolledDestiny = anchorLink;\\n            }\\n\\n            setState(slideIndex, slideAnchorLink, anchorLink, sectionIndex);\\n          } //small timeout in order to avoid entering in hashChange event when scrolling is not finished yet\\n\\n\\n          clearTimeout(scrollId);\\n          scrollId = setTimeout(function () {\\n            isScrolling = false;\\n          }, 100);\\n        }\\n\\n        if (options.fitToSection) {\\n          //for the auto adjust of the viewport to fit a whole section\\n          clearTimeout(scrollId2);\\n          scrollId2 = setTimeout(function () {\\n            //checking it again in case it changed during the delay\\n            if (options.fitToSection && //is the destination element bigger than the viewport?\\n            $(SECTION_ACTIVE_SEL)[0].offsetHeight <= windowsHeight) {\\n              fitToSection();\\n            }\\n          }, options.fitToSectionDelay);\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Fits the site to the nearest active section\\r\\n    */\\n\\n\\n    function fitToSection() {\\n      //checking fitToSection again in case it was set to false before the timeout delay\\n      if (canScroll) {\\n        //allows to scroll to an active section and\\n        //if the section is already active, we prevent firing callbacks\\n        isResizing = true;\\n        scrollPage($(SECTION_ACTIVE_SEL)[0]);\\n        isResizing = false;\\n      }\\n    }\\n    /**\\r\\n    * Determines whether the active section has seen in its whole or not.\\r\\n    */\\n\\n\\n    function isCompletelyInViewPort(movement) {\\n      var top = $(SECTION_ACTIVE_SEL)[0].offsetTop;\\n      var bottom = top + getWindowHeight();\\n\\n      if (movement == 'up') {\\n        return bottom >= getScrollTop() + getWindowHeight();\\n      }\\n\\n      return top <= getScrollTop();\\n    }\\n    /**\\r\\n    * Gets the directon of the the scrolling fired by the scroll event.\\r\\n    */\\n\\n\\n    function getScrollDirection(currentScroll) {\\n      var direction = currentScroll > lastScroll ? 'down' : 'up';\\n      lastScroll = currentScroll; //needed for auto-height sections to determine if we want to scroll to the top or bottom of the destination\\n\\n      previousDestTop = currentScroll;\\n      return direction;\\n    }\\n    /**\\r\\n    * Determines the way of scrolling up or down:\\r\\n    * by 'automatically' scrolling a section or by using the default and normal scrolling.\\r\\n    */\\n\\n\\n    function scrolling(type) {\\n      if (!isScrollAllowed.m[type]) {\\n        return;\\n      }\\n\\n      var scrollSection = type === 'down' ? moveSectionDown : moveSectionUp;\\n\\n      if (options.scrollOverflow) {\\n        var scrollable = options.scrollOverflowHandler.scrollable($(SECTION_ACTIVE_SEL)[0]);\\n        var check = type === 'down' ? 'bottom' : 'top';\\n\\n        if (scrollable != null) {\\n          //is the scrollbar at the start/end of the scroll?\\n          if (options.scrollOverflowHandler.isScrolled(check, scrollable)) {\\n            scrollSection();\\n          } else {\\n            return true;\\n          }\\n        } else {\\n          // moved up/down\\n          scrollSection();\\n        }\\n      } else {\\n        // moved up/down\\n        scrollSection();\\n      }\\n    }\\n    /*\\r\\n    * Preventing bouncing in iOS #2285\\r\\n    */\\n\\n\\n    function preventBouncing(e) {\\n      if (options.autoScrolling && isReallyTouch(e) && isScrollAllowed.m.up) {\\n        //preventing the easing on iOS devices\\n        preventDefault(e);\\n      }\\n    }\\n\\n    var touchStartY = 0;\\n    var touchStartX = 0;\\n    var touchEndY = 0;\\n    var touchEndX = 0;\\n    /* Detecting touch events\\r\\n      * As we are changing the top property of the page on scrolling, we can not use the traditional way to detect it.\\r\\n    * This way, the touchstart and the touch moves shows an small difference between them which is the\\r\\n    * used one to determine the direction.\\r\\n    */\\n\\n    function touchMoveHandler(e) {\\n      var activeSection = closest(e.target, SECTION_SEL) || $(SECTION_ACTIVE_SEL)[0]; // additional: if one of the normalScrollElements isn't within options.normalScrollElementTouchThreshold hops up the DOM chain\\n\\n      if (isReallyTouch(e)) {\\n        if (options.autoScrolling) {\\n          //preventing the easing on iOS devices\\n          preventDefault(e);\\n        }\\n\\n        var touchEvents = getEventsPage(e);\\n        touchEndY = touchEvents.y;\\n        touchEndX = touchEvents.x; //if movement in the X axys is greater than in the Y and the currect section has slides...\\n\\n        if ($(SLIDES_WRAPPER_SEL, activeSection).length && Math.abs(touchStartX - touchEndX) > Math.abs(touchStartY - touchEndY)) {\\n          //is the movement greater than the minimum resistance to scroll?\\n          if (!slideMoving && Math.abs(touchStartX - touchEndX) > window.innerWidth / 100 * options.touchSensitivity) {\\n            if (touchStartX > touchEndX) {\\n              if (isScrollAllowed.m.right) {\\n                moveSlideRight(activeSection); //next\\n              }\\n            } else {\\n              if (isScrollAllowed.m.left) {\\n                moveSlideLeft(activeSection); //prev\\n              }\\n            }\\n          }\\n        } //vertical scrolling (only when autoScrolling is enabled)\\n        else if (options.autoScrolling && canScroll) {\\n            //is the movement greater than the minimum resistance to scroll?\\n            if (Math.abs(touchStartY - touchEndY) > window.innerHeight / 100 * options.touchSensitivity) {\\n              if (touchStartY > touchEndY) {\\n                scrolling('down');\\n              } else if (touchEndY > touchStartY) {\\n                scrolling('up');\\n              }\\n            }\\n          }\\n      }\\n    }\\n    /**\\r\\n    * As IE >= 10 fires both touch and mouse events when using a mouse in a touchscreen\\r\\n    * this way we make sure that is really a touch event what IE is detecting.\\r\\n    */\\n\\n\\n    function isReallyTouch(e) {\\n      //if is not IE   ||  IE is detecting `touch` or `pen`\\n      return typeof e.pointerType === 'undefined' || e.pointerType != 'mouse';\\n    }\\n    /**\\r\\n    * Handler for the touch start event.\\r\\n    */\\n\\n\\n    function touchStartHandler(e) {\\n      //stopping the auto scroll to adjust to a section\\n      if (options.fitToSection) {\\n        activeAnimation = false;\\n      }\\n\\n      if (isReallyTouch(e)) {\\n        var touchEvents = getEventsPage(e);\\n        touchStartY = touchEvents.y;\\n        touchStartX = touchEvents.x;\\n      }\\n    }\\n    /**\\r\\n    * Gets the average of the last `number` elements of the given array.\\r\\n    */\\n\\n\\n    function getAverage(elements, number) {\\n      var sum = 0; //taking `number` elements from the end to make the average, if there are not enought, 1\\n\\n      var lastElements = elements.slice(Math.max(elements.length - number, 1));\\n\\n      for (var i = 0; i < lastElements.length; i++) {\\n        sum = sum + lastElements[i];\\n      }\\n\\n      return Math.ceil(sum / number);\\n    }\\n    /**\\r\\n     * Detecting mousewheel scrolling\\r\\n     *\\r\\n     * http://blogs.sitepointstatic.com/examples/tech/mouse-wheel/index.html\\r\\n     * http://www.sitepoint.com/html5-javascript-mouse-wheel/\\r\\n     */\\n\\n\\n    var prevTime = new Date().getTime();\\n\\n    function MouseWheelHandler(e) {\\n      var curTime = new Date().getTime();\\n      var isNormalScroll = hasClass($(COMPLETELY_SEL)[0], NORMAL_SCROLL); //is scroll allowed?\\n\\n      if (!isScrollAllowed.m.down && !isScrollAllowed.m.up) {\\n        preventDefault(e);\\n        return false;\\n      } //autoscrolling and not zooming?\\n\\n\\n      if (options.autoScrolling && !controlPressed && !isNormalScroll) {\\n        // cross-browser wheel delta\\n        e = e || window.event;\\n        var value = e.wheelDelta || -e.deltaY || -e.detail;\\n        var delta = Math.max(-1, Math.min(1, value));\\n        var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';\\n        var isScrollingVertically = Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta) || Math.abs(e.deltaX) < Math.abs(e.deltaY) || !horizontalDetection; //Limiting the array to 150 (lets not waste memory!)\\n\\n        if (scrollings.length > 149) {\\n          scrollings.shift();\\n        } //keeping record of the previous scrollings\\n\\n\\n        scrollings.push(Math.abs(value)); //preventing to scroll the site on mouse wheel when scrollbar is present\\n\\n        if (options.scrollBar) {\\n          preventDefault(e);\\n        } //time difference between the last scroll and the current one\\n\\n\\n        var timeDiff = curTime - prevTime;\\n        prevTime = curTime; //haven't they scrolled in a while?\\n        //(enough to be consider a different scrolling action to scroll another section)\\n\\n        if (timeDiff > 200) {\\n          //emptying the array, we dont care about old scrollings for our averages\\n          scrollings = [];\\n        }\\n\\n        if (canScroll) {\\n          var averageEnd = getAverage(scrollings, 10);\\n          var averageMiddle = getAverage(scrollings, 70);\\n          var isAccelerating = averageEnd >= averageMiddle; //to avoid double swipes...\\n\\n          if (isAccelerating && isScrollingVertically) {\\n            //scrolling down?\\n            if (delta < 0) {\\n              scrolling('down'); //scrolling up?\\n            } else {\\n              scrolling('up');\\n            }\\n          }\\n        }\\n\\n        return false;\\n      }\\n\\n      if (options.fitToSection) {\\n        //stopping the auto scroll to adjust to a section\\n        activeAnimation = false;\\n      }\\n    }\\n    /**\\r\\n    * Slides a slider to the given direction.\\r\\n    * Optional `section` param.\\r\\n    */\\n\\n\\n    function moveSlide(direction, section) {\\n      var activeSection = section == null ? $(SECTION_ACTIVE_SEL)[0] : section;\\n      var slides = $(SLIDES_WRAPPER_SEL, activeSection)[0]; // more than one slide needed and nothing should be sliding\\n\\n      if (slides == null || slideMoving || $(SLIDE_SEL, slides).length < 2) {\\n        return;\\n      }\\n\\n      var currentSlide = $(SLIDE_ACTIVE_SEL, slides)[0];\\n      var destiny = null;\\n\\n      if (direction === 'left') {\\n        destiny = prevUntil(currentSlide, SLIDE_SEL);\\n      } else {\\n        destiny = nextUntil(currentSlide, SLIDE_SEL);\\n      } //isn't there a next slide in the secuence?\\n\\n\\n      if (destiny == null) {\\n        //respect loopHorizontal settin\\n        if (!options.loopHorizontal) return;\\n        var slideSiblings = siblings(currentSlide);\\n\\n        if (direction === 'left') {\\n          destiny = slideSiblings[slideSiblings.length - 1]; //last\\n        } else {\\n          destiny = slideSiblings[0]; //first\\n        }\\n      }\\n\\n      slideMoving =  true && !FP.test.isTesting;\\n      landscapeScroll(slides, destiny, direction);\\n    }\\n    /**\\r\\n    * Maintains the active slides in the viewport\\r\\n    * (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)\\r\\n    */\\n\\n\\n    function keepSlidesPosition() {\\n      var activeSlides = $(SLIDE_ACTIVE_SEL);\\n\\n      for (var i = 0; i < activeSlides.length; i++) {\\n        silentLandscapeScroll(activeSlides[i], 'internal');\\n      }\\n    }\\n\\n    var previousDestTop = 0;\\n    /**\\r\\n    * Returns the destination Y position based on the scrolling direction and\\r\\n    * the height of the section.\\r\\n    */\\n\\n    function getDestinationPosition(element) {\\n      var elementHeight = element.offsetHeight;\\n      var elementTop = element.offsetTop; //top of the desination will be at the top of the viewport\\n\\n      var position = elementTop;\\n      var isScrollingDown = elementTop > previousDestTop;\\n      var sectionBottom = position - windowsHeight + elementHeight;\\n      var bigSectionsDestination = options.bigSectionsDestination; //is the destination element bigger than the viewport?\\n\\n      if (elementHeight > windowsHeight) {\\n        //scrolling up?\\n        if (!isScrollingDown && !bigSectionsDestination || bigSectionsDestination === 'bottom') {\\n          position = sectionBottom;\\n        }\\n      } //sections equal or smaller than the viewport height && scrolling down? ||  is resizing and its in the last section\\n      else if (isScrollingDown || isResizing && next(element) == null) {\\n          //The bottom of the destination will be at the bottom of the viewport\\n          position = sectionBottom;\\n        }\\n      /*\\r\\n      Keeping record of the last scrolled position to determine the scrolling direction.\\r\\n      No conventional methods can be used as the scroll bar might not be present\\r\\n      AND the section might not be active if it is auto-height and didnt reach the middle\\r\\n      of the viewport.\\r\\n      */\\n\\n\\n      previousDestTop = position;\\n      return position;\\n    }\\n    /**\\r\\n    * Scrolls the site to the given element and scrolls to the slide if a callback is given.\\r\\n    */\\n\\n\\n    function scrollPage(element, callback, isMovementUp) {\\n      if (element == null) {\\n        return;\\n      } //there's no element to scroll, leaving the function\\n\\n\\n      var dtop = getDestinationPosition(element);\\n      var slideAnchorLink;\\n      var slideIndex; //local variables\\n\\n      var v = {\\n        element: element,\\n        callback: callback,\\n        isMovementUp: isMovementUp,\\n        dtop: dtop,\\n        yMovement: getYmovement(element),\\n        anchorLink: element.getAttribute('data-anchor'),\\n        sectionIndex: index(element, SECTION_SEL),\\n        activeSlide: $(SLIDE_ACTIVE_SEL, element)[0],\\n        activeSection: $(SECTION_ACTIVE_SEL)[0],\\n        leavingSection: index($(SECTION_ACTIVE_SEL), SECTION_SEL) + 1,\\n        //caching the value of isResizing at the momment the function is called\\n        //because it will be checked later inside a setTimeout and the value might change\\n        localIsResizing: isResizing\\n      }; //quiting when destination scroll is the same as the current one\\n\\n      if (v.activeSection == element && !isResizing || options.scrollBar && getScrollTop() === v.dtop && !hasClass(element, AUTO_HEIGHT)) {\\n        return;\\n      }\\n\\n      if (v.activeSlide != null) {\\n        slideAnchorLink = v.activeSlide.getAttribute('data-anchor');\\n        slideIndex = index(v.activeSlide);\\n      } //callback (onLeave) if the site is not just resizing and readjusting the slides\\n\\n\\n      if (!v.localIsResizing) {\\n        var direction = v.yMovement; //required for continousVertical\\n\\n        if (typeof isMovementUp !== 'undefined') {\\n          direction = isMovementUp ? 'up' : 'down';\\n        } //for the callback\\n\\n\\n        v.direction = direction;\\n\\n        if (isFunction(options.onLeave)) {\\n          if (fireCallback('onLeave', v) === false) {\\n            return;\\n          }\\n        }\\n      } // If continuousVertical && we need to wrap around\\n\\n\\n      if (options.autoScrolling && options.continuousVertical && typeof v.isMovementUp !== \\\"undefined\\\" && (!v.isMovementUp && v.yMovement == 'up' || // Intending to scroll down but about to go up or\\n      v.isMovementUp && v.yMovement == 'down')) {\\n        // intending to scroll up but about to go down\\n        v = createInfiniteSections(v);\\n      } //pausing media of the leaving section (if we are not just resizing, as destinatino will be the same one)\\n\\n\\n      if (!v.localIsResizing) {\\n        stopMedia(v.activeSection);\\n      }\\n\\n      if (options.scrollOverflow) {\\n        options.scrollOverflowHandler.beforeLeave();\\n      }\\n\\n      addClass(element, ACTIVE);\\n      removeClass(siblings(element), ACTIVE);\\n      lazyLoad(element);\\n\\n      if (options.scrollOverflow) {\\n        options.scrollOverflowHandler.onLeave();\\n      } //preventing from activating the MouseWheelHandler event\\n      //more than once if the page is scrolling\\n\\n\\n      canScroll =  false || FP.test.isTesting;\\n      setState(slideIndex, slideAnchorLink, v.anchorLink, v.sectionIndex);\\n      performMovement(v); //flag to avoid callingn `scrollPage()` twice in case of using anchor links\\n\\n      lastScrolledDestiny = v.anchorLink; //avoid firing it twice (as it does also on scroll)\\n\\n      activateMenuAndNav(v.anchorLink, v.sectionIndex);\\n    }\\n    /**\\r\\n    * Dispatch events & callbacks making sure it does it on the right format, depending on\\r\\n    * whether v2compatible is being used or not.\\r\\n    */\\n\\n\\n    function fireCallback(eventName, v) {\\n      var eventData = getEventData(eventName, v);\\n\\n      if (!options.v2compatible) {\\n        trigger(container, eventName, eventData);\\n\\n        if (options[eventName].apply(eventData[Object.keys(eventData)[0]], toArray(eventData)) === false) {\\n          return false;\\n        }\\n      } else {\\n        if (options[eventName].apply(eventData[0], eventData.slice(1)) === false) {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n    /**\\r\\n    * Makes sure to only create a Panel object if the element exist\\r\\n    */\\n\\n\\n    function nullOrSection(el) {\\n      return el ? new Section(el) : null;\\n    }\\n\\n    function nullOrSlide(el) {\\n      return el ? new Slide(el) : null;\\n    }\\n    /**\\r\\n    * Gets the event's data for the given event on the right format. Depending on whether\\r\\n    * v2compatible is being used or not.\\r\\n    */\\n\\n\\n    function getEventData(eventName, v) {\\n      var paramsPerEvent;\\n\\n      if (!options.v2compatible) {\\n        //using functions to run only the necessary bits within the object\\n        paramsPerEvent = {\\n          afterRender: function () {\\n            return {\\n              section: nullOrSection($(SECTION_ACTIVE_SEL)[0]),\\n              slide: nullOrSlide($(SLIDE_ACTIVE_SEL, $(SECTION_ACTIVE_SEL)[0])[0])\\n            };\\n          },\\n          onLeave: function () {\\n            return {\\n              origin: nullOrSection(v.activeSection),\\n              destination: nullOrSection(v.element),\\n              direction: v.direction\\n            };\\n          },\\n          afterLoad: function () {\\n            return paramsPerEvent.onLeave();\\n          },\\n          afterSlideLoad: function () {\\n            return {\\n              section: nullOrSection(v.section),\\n              origin: nullOrSlide(v.prevSlide),\\n              destination: nullOrSlide(v.destiny),\\n              direction: v.direction\\n            };\\n          },\\n          onSlideLeave: function () {\\n            return paramsPerEvent.afterSlideLoad();\\n          }\\n        };\\n      } else {\\n        paramsPerEvent = {\\n          afterRender: function () {\\n            return [container];\\n          },\\n          onLeave: function () {\\n            return [v.activeSection, v.leavingSection, v.sectionIndex + 1, v.direction];\\n          },\\n          afterLoad: function () {\\n            return [v.element, v.anchorLink, v.sectionIndex + 1];\\n          },\\n          afterSlideLoad: function () {\\n            return [v.destiny, v.anchorLink, v.sectionIndex + 1, v.slideAnchor, v.slideIndex];\\n          },\\n          onSlideLeave: function () {\\n            return [v.prevSlide, v.anchorLink, v.sectionIndex + 1, v.prevSlideIndex, v.direction, v.slideIndex];\\n          }\\n        };\\n      }\\n\\n      return paramsPerEvent[eventName]();\\n    }\\n    /**\\r\\n    * Performs the vertical movement (by CSS3 or by jQuery)\\r\\n    */\\n\\n\\n    function performMovement(v) {\\n      // using CSS3 translate functionality\\n      if (options.css3 && options.autoScrolling && !options.scrollBar) {\\n        // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625\\n        // that's why we round it to 0.\\n        var translate3d = 'translate3d(0px, -' + Math.round(v.dtop) + 'px, 0px)';\\n        transformContainer(translate3d, true); //even when the scrollingSpeed is 0 there's a little delay, which might cause the\\n        //scrollingSpeed to change in case of using silentMoveTo();\\n\\n        if (options.scrollingSpeed) {\\n          clearTimeout(afterSectionLoadsId);\\n          afterSectionLoadsId = setTimeout(function () {\\n            afterSectionLoads(v);\\n          }, options.scrollingSpeed);\\n        } else {\\n          afterSectionLoads(v);\\n        }\\n      } // using JS to animate\\n      else {\\n          var scrollSettings = getScrollSettings(v.dtop);\\n          FP.test.top = -v.dtop + 'px';\\n          scrollTo(scrollSettings.element, scrollSettings.options, options.scrollingSpeed, function () {\\n            if (options.scrollBar) {\\n              /* Hack!\\r\\n              The timeout prevents setting the most dominant section in the viewport as \\\"active\\\" when the user\\r\\n              scrolled to a smaller section by using the mousewheel (auto scrolling) rather than draging the scroll bar.\\r\\n                When using scrollBar:true It seems like the scroll events still getting propagated even after the scrolling animation has finished.\\r\\n              */\\n              setTimeout(function () {\\n                afterSectionLoads(v);\\n              }, 30);\\n            } else {\\n              afterSectionLoads(v);\\n            }\\n          });\\n        }\\n    }\\n    /**\\r\\n    * Gets the scrolling settings depending on the plugin autoScrolling option\\r\\n    */\\n\\n\\n    function getScrollSettings(top) {\\n      var scroll = {}; //top property animation\\n\\n      if (options.autoScrolling && !options.scrollBar) {\\n        scroll.options = -top;\\n        scroll.element = $(WRAPPER_SEL)[0];\\n      } //window real scrolling\\n      else {\\n          scroll.options = top;\\n          scroll.element = window;\\n        }\\n\\n      return scroll;\\n    }\\n    /**\\r\\n    * Adds sections before or after the current one to create the infinite effect.\\r\\n    */\\n\\n\\n    function createInfiniteSections(v) {\\n      // Scrolling down\\n      if (!v.isMovementUp) {\\n        // Move all previous sections to after the active section\\n        after($(SECTION_ACTIVE_SEL)[0], prevAll(v.activeSection, SECTION_SEL).reverse());\\n      } else {\\n        // Scrolling up\\n        // Move all next sections to before the active section\\n        before($(SECTION_ACTIVE_SEL)[0], nextAll(v.activeSection, SECTION_SEL));\\n      } // Maintain the displayed position (now that we changed the element order)\\n\\n\\n      silentScroll($(SECTION_ACTIVE_SEL)[0].offsetTop); // Maintain the active slides visible in the viewport\\n\\n      keepSlidesPosition(); // save for later the elements that still need to be reordered\\n\\n      v.wrapAroundElements = v.activeSection; // Recalculate animation variables\\n\\n      v.dtop = v.element.offsetTop;\\n      v.yMovement = getYmovement(v.element); //sections will temporally have another position in the DOM\\n      //updating this values in case we need them\\n\\n      v.leavingSection = index(v.activeSection, SECTION_SEL) + 1;\\n      v.sectionIndex = index(v.element, SECTION_SEL);\\n      return v;\\n    }\\n    /**\\r\\n    * Fix section order after continuousVertical changes have been animated\\r\\n    */\\n\\n\\n    function continuousVerticalFixSectionOrder(v) {\\n      // If continuousVertical is in effect (and autoScrolling would also be in effect then),\\n      // finish moving the elements around so the direct navigation will function more simply\\n      if (v.wrapAroundElements == null) {\\n        return;\\n      }\\n\\n      if (v.isMovementUp) {\\n        before($(SECTION_SEL)[0], v.wrapAroundElements);\\n      } else {\\n        after($(SECTION_SEL)[$(SECTION_SEL).length - 1], v.wrapAroundElements);\\n      }\\n\\n      silentScroll($(SECTION_ACTIVE_SEL)[0].offsetTop); // Maintain the active slides visible in the viewport\\n\\n      keepSlidesPosition();\\n    }\\n    /**\\r\\n    * Actions to do once the section is loaded.\\r\\n    */\\n\\n\\n    function afterSectionLoads(v) {\\n      continuousVerticalFixSectionOrder(v); //callback (afterLoad) if the site is not just resizing and readjusting the slides\\n\\n      if (isFunction(options.afterLoad) && !v.localIsResizing) {\\n        fireCallback('afterLoad', v);\\n      }\\n\\n      if (options.scrollOverflow) {\\n        options.scrollOverflowHandler.afterLoad();\\n      }\\n\\n      if (!v.localIsResizing) {\\n        playMedia(v.element);\\n      }\\n\\n      addClass(v.element, COMPLETELY);\\n      removeClass(siblings(v.element), COMPLETELY);\\n      canScroll = true;\\n\\n      if (isFunction(v.callback)) {\\n        v.callback();\\n      }\\n    }\\n    /**\\r\\n    * Sets the value for the given attribute from the `data-` attribute with the same suffix\\r\\n    * ie: data-srcset ==> srcset  |  data-src ==> src\\r\\n    */\\n\\n\\n    function setSrc(element, attribute) {\\n      element.setAttribute(attribute, element.getAttribute('data-' + attribute));\\n      element.removeAttribute('data-' + attribute);\\n    }\\n    /**\\r\\n    * Lazy loads image, video and audio elements.\\r\\n    */\\n\\n\\n    function lazyLoad(destiny) {\\n      if (!options.lazyLoading) {\\n        return;\\n      }\\n\\n      var panel = getSlideOrSection(destiny);\\n      $('img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]', panel).forEach(function (element) {\\n        ['src', 'srcset'].forEach(function (type) {\\n          var attribute = element.getAttribute('data-' + type);\\n\\n          if (attribute != null && attribute) {\\n            setSrc(element, type);\\n          }\\n        });\\n\\n        if (matches(element, 'source')) {\\n          var elementToPlay = closest(element, 'video, audio');\\n\\n          if (elementToPlay) {\\n            elementToPlay.load();\\n          }\\n        }\\n      });\\n    }\\n    /**\\r\\n    * Plays video and audio elements.\\r\\n    */\\n\\n\\n    function playMedia(destiny) {\\n      var panel = getSlideOrSection(destiny); //playing HTML5 media elements\\n\\n      $('video, audio', panel).forEach(function (element) {\\n        if (element.hasAttribute('data-autoplay') && typeof element.play === 'function') {\\n          element.play();\\n        }\\n      }); //youtube videos\\n\\n      $('iframe[src*=\\\"youtube.com/embed/\\\"]', panel).forEach(function (element) {\\n        if (element.hasAttribute('data-autoplay')) {\\n          playYoutube(element);\\n        } //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.\\n\\n\\n        element.onload = function () {\\n          if (element.hasAttribute('data-autoplay')) {\\n            playYoutube(element);\\n          }\\n        };\\n      });\\n    }\\n    /**\\r\\n    * Plays a youtube video\\r\\n    */\\n\\n\\n    function playYoutube(element) {\\n      element.contentWindow.postMessage('{\\\"event\\\":\\\"command\\\",\\\"func\\\":\\\"playVideo\\\",\\\"args\\\":\\\"\\\"}', '*');\\n    }\\n    /**\\r\\n    * Stops video and audio elements.\\r\\n    */\\n\\n\\n    function stopMedia(destiny) {\\n      var panel = getSlideOrSection(destiny); //stopping HTML5 media elements\\n\\n      $('video, audio', panel).forEach(function (element) {\\n        if (!element.hasAttribute('data-keepplaying') && typeof element.pause === 'function') {\\n          element.pause();\\n        }\\n      }); //youtube videos\\n\\n      $('iframe[src*=\\\"youtube.com/embed/\\\"]', panel).forEach(function (element) {\\n        if (/youtube\\\\.com\\\\/embed\\\\//.test(element.getAttribute('src')) && !element.hasAttribute('data-keepplaying')) {\\n          element.contentWindow.postMessage('{\\\"event\\\":\\\"command\\\",\\\"func\\\":\\\"pauseVideo\\\",\\\"args\\\":\\\"\\\"}', '*');\\n        }\\n      });\\n    }\\n    /**\\r\\n    * Gets the active slide (or section) for the given section\\r\\n    */\\n\\n\\n    function getSlideOrSection(destiny) {\\n      var slide = $(SLIDE_ACTIVE_SEL, destiny);\\n\\n      if (slide.length) {\\n        destiny = slide[0];\\n      }\\n\\n      return destiny;\\n    }\\n    /**\\r\\n    * Scrolls to the anchor in the URL when loading the site\\r\\n    */\\n\\n\\n    function scrollToAnchor() {\\n      var anchors = getAnchorsURL();\\n      var sectionAnchor = anchors.section;\\n      var slideAnchor = anchors.slide;\\n\\n      if (sectionAnchor) {\\n        //if theres any #\\n        if (options.animateAnchor) {\\n          scrollPageAndSlide(sectionAnchor, slideAnchor);\\n        } else {\\n          silentMoveTo(sectionAnchor, slideAnchor);\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Detecting any change on the URL to scroll to the given anchor link\\r\\n    * (a way to detect back history button as we play with the hashes on the URL)\\r\\n    */\\n\\n\\n    function hashChangeHandler() {\\n      if (!isScrolling && !options.lockAnchors) {\\n        var anchors = getAnchorsURL();\\n        var sectionAnchor = anchors.section;\\n        var slideAnchor = anchors.slide; //when moving to a slide in the first section for the first time (first time to add an anchor to the URL)\\n\\n        var isFirstSlideMove = typeof lastScrolledDestiny === 'undefined';\\n        var isFirstScrollMove = typeof lastScrolledDestiny === 'undefined' && typeof slideAnchor === 'undefined' && !slideMoving;\\n\\n        if (sectionAnchor && sectionAnchor.length) {\\n          /*in order to call scrollpage() only once for each destination at a time\\r\\n          It is called twice for each scroll otherwise, as in case of using anchorlinks `hashChange`\\r\\n          event is fired on every scroll too.*/\\n          if (sectionAnchor && sectionAnchor !== lastScrolledDestiny && !isFirstSlideMove || isFirstScrollMove || !slideMoving && lastScrolledSlide != slideAnchor) {\\n            scrollPageAndSlide(sectionAnchor, slideAnchor);\\n          }\\n        }\\n      }\\n    } //gets the URL anchors (section and slide)\\n\\n\\n    function getAnchorsURL() {\\n      var section;\\n      var slide;\\n      var hash = window.location.hash;\\n\\n      if (hash.length) {\\n        //getting the anchor link in the URL and deleting the `#`\\n        var anchorsParts = hash.replace('#', '').split('/'); //using / for visual reasons and not as a section/slide separator #2803\\n\\n        var isFunkyAnchor = hash.indexOf('#/') > -1;\\n        section = isFunkyAnchor ? '/' + anchorsParts[1] : decodeURIComponent(anchorsParts[0]);\\n        var slideAnchor = isFunkyAnchor ? anchorsParts[2] : anchorsParts[1];\\n\\n        if (slideAnchor && slideAnchor.length) {\\n          slide = decodeURIComponent(slideAnchor);\\n        }\\n      }\\n\\n      return {\\n        section: section,\\n        slide: slide\\n      };\\n    } //Sliding with arrow keys, both, vertical and horizontal\\n\\n\\n    function keydownHandler(e) {\\n      clearTimeout(keydownId);\\n      var activeElement = document.activeElement;\\n      var keyCode = e.keyCode; //tab?\\n\\n      if (keyCode === 9) {\\n        onTab(e);\\n      } else if (!matches(activeElement, 'textarea') && !matches(activeElement, 'input') && !matches(activeElement, 'select') && activeElement.getAttribute('contentEditable') !== \\\"true\\\" && activeElement.getAttribute('contentEditable') !== '' && options.keyboardScrolling && options.autoScrolling) {\\n        //preventing the scroll with arrow keys & spacebar & Page Up & Down keys\\n        var keyControls = [40, 38, 32, 33, 34];\\n\\n        if (keyControls.indexOf(keyCode) > -1) {\\n          preventDefault(e);\\n        }\\n\\n        controlPressed = e.ctrlKey;\\n        keydownId = setTimeout(function () {\\n          onkeydown(e);\\n        }, 150);\\n      }\\n    }\\n\\n    function tooltipTextHandler() {\\n      /*jshint validthis:true */\\n      trigger(prev(this), 'click');\\n    } //to prevent scrolling while zooming\\n\\n\\n    function keyUpHandler(e) {\\n      if (isWindowFocused) {\\n        //the keyup gets fired on new tab ctrl + t in Firefox\\n        controlPressed = e.ctrlKey;\\n      }\\n    } //binding the mousemove when the mouse's middle button is released\\n\\n\\n    function mouseDownHandler(e) {\\n      //middle button\\n      if (e.which == 2) {\\n        oldPageY = e.pageY;\\n        container.addEventListener('mousemove', mouseMoveHandler);\\n      }\\n    } //unbinding the mousemove when the mouse's middle button is released\\n\\n\\n    function mouseUpHandler(e) {\\n      //middle button\\n      if (e.which == 2) {\\n        container.removeEventListener('mousemove', mouseMoveHandler);\\n      }\\n    }\\n    /**\\r\\n    * Makes sure the tab key will only focus elements within the current section/slide\\r\\n    * preventing this way from breaking the page.\\r\\n    * Based on \\\"Modals and keyboard traps\\\"\\r\\n    * from https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex\\r\\n    */\\n\\n\\n    function onTab(e) {\\n      var isShiftPressed = e.shiftKey;\\n      var activeElement = document.activeElement;\\n      var focusableElements = getFocusables(getSlideOrSection($(SECTION_ACTIVE_SEL)[0]));\\n\\n      function preventAndFocusFirst(e) {\\n        preventDefault(e);\\n        return focusableElements[0] ? focusableElements[0].focus() : null;\\n      } //outside any section or slide? Let's not hijack the tab!\\n\\n\\n      if (isFocusOutside(e)) {\\n        return;\\n      } //is there an element with focus?\\n\\n\\n      if (activeElement) {\\n        if (closest(activeElement, SECTION_ACTIVE_SEL + ',' + SECTION_ACTIVE_SEL + ' ' + SLIDE_ACTIVE_SEL) == null) {\\n          activeElement = preventAndFocusFirst(e);\\n        }\\n      } //no element if focused? Let's focus the first one of the section/slide\\n      else {\\n          preventAndFocusFirst(e);\\n        } //when reached the first or last focusable element of the section/slide\\n      //we prevent the tab action to keep it in the last focusable element\\n\\n\\n      if (!isShiftPressed && activeElement == focusableElements[focusableElements.length - 1] || isShiftPressed && activeElement == focusableElements[0]) {\\n        preventDefault(e);\\n      }\\n    }\\n    /**\\r\\n    * Gets all the focusable elements inside the passed element.\\r\\n    */\\n\\n\\n    function getFocusables(el) {\\n      return [].slice.call($(focusableElementsString, el)).filter(function (item) {\\n        return item.getAttribute('tabindex') !== '-1' //are also not hidden elements (or with hidden parents)\\n        && item.offsetParent !== null;\\n      });\\n    }\\n    /**\\r\\n    * Determines whether the focus is outside fullpage.js sections/slides or not.\\r\\n    */\\n\\n\\n    function isFocusOutside(e) {\\n      var allFocusables = getFocusables(document);\\n      var currentFocusIndex = allFocusables.indexOf(document.activeElement);\\n      var focusDestinationIndex = e.shiftKey ? currentFocusIndex - 1 : currentFocusIndex + 1;\\n      var focusDestination = allFocusables[focusDestinationIndex];\\n      var destinationItemSlide = nullOrSlide(closest(focusDestination, SLIDE_SEL));\\n      var destinationItemSection = nullOrSection(closest(focusDestination, SECTION_SEL));\\n      return !destinationItemSlide && !destinationItemSection;\\n    } //Scrolling horizontally when clicking on the slider controls.\\n\\n\\n    function slideArrowHandler() {\\n      /*jshint validthis:true */\\n      var section = closest(this, SECTION_SEL);\\n      /*jshint validthis:true */\\n\\n      if (hasClass(this, SLIDES_PREV)) {\\n        if (isScrollAllowed.m.left) {\\n          moveSlideLeft(section);\\n        }\\n      } else {\\n        if (isScrollAllowed.m.right) {\\n          moveSlideRight(section);\\n        }\\n      }\\n    } //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.\\n\\n\\n    function blurHandler() {\\n      isWindowFocused = false;\\n      controlPressed = false;\\n    } //Scrolls to the section when clicking the navigation bullet\\n\\n\\n    function sectionBulletHandler(e) {\\n      preventDefault(e);\\n      /*jshint validthis:true */\\n\\n      var indexBullet = index(closest(this, SECTION_NAV_SEL + ' li'));\\n      scrollPage($(SECTION_SEL)[indexBullet]);\\n    } //Scrolls the slider to the given slide destination for the given section\\n\\n\\n    function slideBulletHandler(e) {\\n      preventDefault(e);\\n      /*jshint validthis:true */\\n\\n      var slides = $(SLIDES_WRAPPER_SEL, closest(this, SECTION_SEL))[0];\\n      var destiny = $(SLIDE_SEL, slides)[index(closest(this, 'li'))];\\n      landscapeScroll(slides, destiny);\\n    } //Menu item handler when not using anchors or using lockAnchors:true\\n\\n\\n    function menuItemsHandler(e) {\\n      if ($(options.menu)[0] && (options.lockAnchors || !options.anchors.length)) {\\n        preventDefault(e);\\n        moveTo(this.getAttribute('data-menuanchor'));\\n      }\\n    }\\n    /**\\r\\n    * Keydown event\\r\\n    */\\n\\n\\n    function onkeydown(e) {\\n      var shiftPressed = e.shiftKey; //do nothing if we can not scroll or we are not using horizotnal key arrows.\\n\\n      if (!canScroll && [37, 39].indexOf(e.keyCode) < 0) {\\n        return;\\n      }\\n\\n      switch (e.keyCode) {\\n        //up\\n        case 38:\\n        case 33:\\n          if (isScrollAllowed.k.up) {\\n            moveSectionUp();\\n          }\\n\\n          break;\\n        //down\\n\\n        case 32:\\n          //spacebar\\n          if (shiftPressed && isScrollAllowed.k.up) {\\n            moveSectionUp();\\n            break;\\n          }\\n\\n        /* falls through */\\n\\n        case 40:\\n        case 34:\\n          if (isScrollAllowed.k.down) {\\n            moveSectionDown();\\n          }\\n\\n          break;\\n        //Home\\n\\n        case 36:\\n          if (isScrollAllowed.k.up) {\\n            moveTo(1);\\n          }\\n\\n          break;\\n        //End\\n\\n        case 35:\\n          if (isScrollAllowed.k.down) {\\n            moveTo($(SECTION_SEL).length);\\n          }\\n\\n          break;\\n        //left\\n\\n        case 37:\\n          if (isScrollAllowed.k.left) {\\n            moveSlideLeft();\\n          }\\n\\n          break;\\n        //right\\n\\n        case 39:\\n          if (isScrollAllowed.k.right) {\\n            moveSlideRight();\\n          }\\n\\n          break;\\n\\n        default:\\n          return;\\n        // exit this handler for other keys\\n      }\\n    }\\n    /**\\r\\n    * Detecting the direction of the mouse movement.\\r\\n    * Used only for the middle button of the mouse.\\r\\n    */\\n\\n\\n    var oldPageY = 0;\\n\\n    function mouseMoveHandler(e) {\\n      if (canScroll) {\\n        // moving up\\n        if (e.pageY < oldPageY && isScrollAllowed.m.up) {\\n          moveSectionUp();\\n        } // moving down\\n        else if (e.pageY > oldPageY && isScrollAllowed.m.down) {\\n            moveSectionDown();\\n          }\\n      }\\n\\n      oldPageY = e.pageY;\\n    }\\n    /**\\r\\n    * Scrolls horizontal sliders.\\r\\n    */\\n\\n\\n    function landscapeScroll(slides, destiny, direction) {\\n      var section = closest(slides, SECTION_SEL);\\n      var v = {\\n        slides: slides,\\n        destiny: destiny,\\n        direction: direction,\\n        destinyPos: {\\n          left: destiny.offsetLeft\\n        },\\n        slideIndex: index(destiny),\\n        section: section,\\n        sectionIndex: index(section, SECTION_SEL),\\n        anchorLink: section.getAttribute('data-anchor'),\\n        slidesNav: $(SLIDES_NAV_SEL, section)[0],\\n        slideAnchor: getAnchor(destiny),\\n        prevSlide: $(SLIDE_ACTIVE_SEL, section)[0],\\n        prevSlideIndex: index($(SLIDE_ACTIVE_SEL, section)[0]),\\n        //caching the value of isResizing at the momment the function is called\\n        //because it will be checked later inside a setTimeout and the value might change\\n        localIsResizing: isResizing\\n      };\\n      v.xMovement = getXmovement(v.prevSlideIndex, v.slideIndex);\\n      v.direction = v.direction ? v.direction : v.xMovement; //important!! Only do it when not resizing\\n\\n      if (!v.localIsResizing) {\\n        //preventing from scrolling to the next/prev section when using scrollHorizontally\\n        canScroll = false;\\n      }\\n\\n      if (options.onSlideLeave) {\\n        //if the site is not just resizing and readjusting the slides\\n        if (!v.localIsResizing && v.xMovement !== 'none') {\\n          if (isFunction(options.onSlideLeave)) {\\n            if (fireCallback('onSlideLeave', v) === false) {\\n              slideMoving = false;\\n              return;\\n            }\\n          }\\n        }\\n      }\\n\\n      addClass(destiny, ACTIVE);\\n      removeClass(siblings(destiny), ACTIVE);\\n\\n      if (!v.localIsResizing) {\\n        stopMedia(v.prevSlide);\\n        lazyLoad(destiny);\\n      }\\n\\n      if (!options.loopHorizontal && options.controlArrows) {\\n        //hidding it for the fist slide, showing for the rest\\n        toggle($(SLIDES_ARROW_PREV_SEL, section), v.slideIndex !== 0); //hidding it for the last slide, showing for the rest\\n\\n        toggle($(SLIDES_ARROW_NEXT_SEL, section), next(destiny) != null);\\n      } //only changing the URL if the slides are in the current section (not for resize re-adjusting)\\n\\n\\n      if (hasClass(section, ACTIVE) && !v.localIsResizing) {\\n        setState(v.slideIndex, v.slideAnchor, v.anchorLink, v.sectionIndex);\\n      }\\n\\n      performHorizontalMove(slides, v, true);\\n    }\\n\\n    function afterSlideLoads(v) {\\n      activeSlidesNavigation(v.slidesNav, v.slideIndex); //if the site is not just resizing and readjusting the slides\\n\\n      if (!v.localIsResizing) {\\n        if (isFunction(options.afterSlideLoad)) {\\n          fireCallback('afterSlideLoad', v);\\n        } //needs to be inside the condition to prevent problems with continuousVertical and scrollHorizontally\\n        //and to prevent double scroll right after a windows resize\\n\\n\\n        canScroll = true;\\n        playMedia(v.destiny);\\n      } //letting them slide again\\n\\n\\n      slideMoving = false;\\n    }\\n    /**\\r\\n    * Performs the horizontal movement. (CSS3 or jQuery)\\r\\n    *\\r\\n    * @param fireCallback {Bool} - determines whether or not to fire the callback\\r\\n    */\\n\\n\\n    function performHorizontalMove(slides, v, fireCallback) {\\n      var destinyPos = v.destinyPos;\\n\\n      if (options.css3) {\\n        var translate3d = 'translate3d(-' + Math.round(destinyPos.left) + 'px, 0px, 0px)';\\n        FP.test.translate3dH[v.sectionIndex] = translate3d;\\n        css(addAnimation($(SLIDES_CONTAINER_SEL, slides)), getTransforms(translate3d));\\n        afterSlideLoadsId = setTimeout(function () {\\n          if (fireCallback) {\\n            afterSlideLoads(v);\\n          }\\n        }, options.scrollingSpeed);\\n      } else {\\n        FP.test.left[v.sectionIndex] = Math.round(destinyPos.left);\\n        scrollTo(slides, Math.round(destinyPos.left), options.scrollingSpeed, function () {\\n          if (fireCallback) {\\n            afterSlideLoads(v);\\n          }\\n        });\\n      }\\n    }\\n    /**\\r\\n    * Sets the state for the horizontal bullet navigations.\\r\\n    */\\n\\n\\n    function activeSlidesNavigation(slidesNav, slideIndex) {\\n      if (options.slidesNavigation && slidesNav != null) {\\n        removeClass($(ACTIVE_SEL, slidesNav), ACTIVE);\\n        addClass($('a', $('li', slidesNav)[slideIndex]), ACTIVE);\\n      }\\n    }\\n\\n    var previousHeight = windowsHeight; //when resizing the site, we adjust the heights of the sections, slimScroll...\\n\\n    function resizeHandler() {\\n      //checking if it needs to get responsive\\n      responsive(); // rebuild immediately on touch devices\\n\\n      if (isTouchDevice) {\\n        var activeElement = document.activeElement; //if the keyboard is NOT visible\\n\\n        if (!matches(activeElement, 'textarea') && !matches(activeElement, 'input') && !matches(activeElement, 'select')) {\\n          var currentHeight = getWindowHeight(); //making sure the change in the viewport size is enough to force a rebuild. (20 % of the window to avoid problems when hidding scroll bars)\\n\\n          if (Math.abs(currentHeight - previousHeight) > 20 * Math.max(previousHeight, currentHeight) / 100) {\\n            resizeId = setTimeout(function () {\\n              reBuild(true);\\n              previousHeight = currentHeight; //issue #3336\\n              //when using Chrome we add a small timeout to get the right window height \\n              //https://stackoverflow.com/a/12556928/1081396\\n              //https://stackoverflow.com/questions/13807810/ios-chrome-detection\\n            }, navigator.userAgent.match('CriOS') ? 50 : 0);\\n          }\\n        }\\n      } else {\\n        //in order to call the functions only when the resize is finished\\n        //http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing\\n        clearTimeout(resizeId);\\n        resizeId = setTimeout(function () {\\n          reBuild(true);\\n        }, 350);\\n      }\\n    }\\n    /**\\r\\n    * Checks if the site needs to get responsive and disables autoScrolling if so.\\r\\n    * A class `fp-responsive` is added to the plugin's container in case the user wants to use it for his own responsive CSS.\\r\\n    */\\n\\n\\n    function responsive() {\\n      var widthLimit = options.responsive || options.responsiveWidth; //backwards compatiblity\\n\\n      var heightLimit = options.responsiveHeight; //only calculating what we need. Remember its called on the resize event.\\n\\n      var isBreakingPointWidth = widthLimit && window.innerWidth < widthLimit;\\n      var isBreakingPointHeight = heightLimit && window.innerHeight < heightLimit;\\n\\n      if (widthLimit && heightLimit) {\\n        setResponsive(isBreakingPointWidth || isBreakingPointHeight);\\n      } else if (widthLimit) {\\n        setResponsive(isBreakingPointWidth);\\n      } else if (heightLimit) {\\n        setResponsive(isBreakingPointHeight);\\n      }\\n    }\\n    /**\\r\\n    * Adds transition animations for the given element\\r\\n    */\\n\\n\\n    function addAnimation(element) {\\n      var transition = 'all ' + options.scrollingSpeed + 'ms ' + options.easingcss3;\\n      removeClass(element, NO_TRANSITION);\\n      return css(element, {\\n        '-webkit-transition': transition,\\n        'transition': transition\\n      });\\n    }\\n    /**\\r\\n    * Remove transition animations for the given element\\r\\n    */\\n\\n\\n    function removeAnimation(element) {\\n      return addClass(element, NO_TRANSITION);\\n    }\\n    /**\\r\\n    * Activating the vertical navigation bullets according to the given slide name.\\r\\n    */\\n\\n\\n    function activateNavDots(name, sectionIndex) {\\n      if (options.navigation && $(SECTION_NAV_SEL)[0] != null) {\\n        removeClass($(ACTIVE_SEL, $(SECTION_NAV_SEL)[0]), ACTIVE);\\n\\n        if (name) {\\n          addClass($('a[href=\\\"#' + name + '\\\"]', $(SECTION_NAV_SEL)[0]), ACTIVE);\\n        } else {\\n          addClass($('a', $('li', $(SECTION_NAV_SEL)[0])[sectionIndex]), ACTIVE);\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Activating the website main menu elements according to the given slide name.\\r\\n    */\\n\\n\\n    function activateMenuElement(name) {\\n      $(options.menu).forEach(function (menu) {\\n        if (options.menu && menu != null) {\\n          removeClass($(ACTIVE_SEL, menu), ACTIVE);\\n          addClass($('[data-menuanchor=\\\"' + name + '\\\"]', menu), ACTIVE);\\n        }\\n      });\\n    }\\n    /**\\r\\n    * Sets to active the current menu and vertical nav items.\\r\\n    */\\n\\n\\n    function activateMenuAndNav(anchor, index) {\\n      activateMenuElement(anchor);\\n      activateNavDots(anchor, index);\\n    }\\n    /**\\r\\n    * Retuns `up` or `down` depending on the scrolling movement to reach its destination\\r\\n    * from the current section.\\r\\n    */\\n\\n\\n    function getYmovement(destiny) {\\n      var fromIndex = index($(SECTION_ACTIVE_SEL)[0], SECTION_SEL);\\n      var toIndex = index(destiny, SECTION_SEL);\\n\\n      if (fromIndex == toIndex) {\\n        return 'none';\\n      }\\n\\n      if (fromIndex > toIndex) {\\n        return 'up';\\n      }\\n\\n      return 'down';\\n    }\\n    /**\\r\\n    * Retuns `right` or `left` depending on the scrolling movement to reach its destination\\r\\n    * from the current slide.\\r\\n    */\\n\\n\\n    function getXmovement(fromIndex, toIndex) {\\n      if (fromIndex == toIndex) {\\n        return 'none';\\n      }\\n\\n      if (fromIndex > toIndex) {\\n        return 'left';\\n      }\\n\\n      return 'right';\\n    }\\n\\n    function addTableClass(element) {\\n      //In case we are styling for the 2nd time as in with reponsiveSlides\\n      if (!hasClass(element, TABLE)) {\\n        var wrapper = document.createElement('div');\\n        wrapper.className = TABLE_CELL;\\n        wrapper.style.height = getTableHeight(element) + 'px';\\n        addClass(element, TABLE);\\n        wrapInner(element, wrapper);\\n      }\\n    }\\n\\n    function getTableHeight(element) {\\n      var sectionHeight = windowsHeight;\\n\\n      if (options.paddingTop || options.paddingBottom) {\\n        var section = element;\\n\\n        if (!hasClass(section, SECTION)) {\\n          section = closest(element, SECTION_SEL);\\n        }\\n\\n        var paddings = parseInt(getComputedStyle(section)['padding-top']) + parseInt(getComputedStyle(section)['padding-bottom']);\\n        sectionHeight = windowsHeight - paddings;\\n      }\\n\\n      return sectionHeight;\\n    }\\n    /**\\r\\n    * Adds a css3 transform property to the container class with or without animation depending on the animated param.\\r\\n    */\\n\\n\\n    function transformContainer(translate3d, animated) {\\n      if (animated) {\\n        addAnimation(container);\\n      } else {\\n        removeAnimation(container);\\n      }\\n\\n      css(container, getTransforms(translate3d));\\n      FP.test.translate3d = translate3d; //syncronously removing the class after the animation has been applied.\\n\\n      setTimeout(function () {\\n        removeClass(container, NO_TRANSITION);\\n      }, 10);\\n    }\\n    /**\\r\\n    * Gets a section by its anchor / index\\r\\n    */\\n\\n\\n    function getSectionByAnchor(sectionAnchor) {\\n      var section = $(SECTION_SEL + '[data-anchor=\\\"' + sectionAnchor + '\\\"]', container)[0];\\n\\n      if (!section) {\\n        var sectionIndex = typeof sectionAnchor !== 'undefined' ? sectionAnchor - 1 : 0;\\n        section = $(SECTION_SEL)[sectionIndex];\\n      }\\n\\n      return section;\\n    }\\n    /**\\r\\n    * Gets a slide inside a given section by its anchor / index\\r\\n    */\\n\\n\\n    function getSlideByAnchor(slideAnchor, section) {\\n      var slide = $(SLIDE_SEL + '[data-anchor=\\\"' + slideAnchor + '\\\"]', section)[0];\\n\\n      if (slide == null) {\\n        slideAnchor = typeof slideAnchor !== 'undefined' ? slideAnchor : 0;\\n        slide = $(SLIDE_SEL, section)[slideAnchor];\\n      }\\n\\n      return slide;\\n    }\\n    /**\\r\\n    * Scrolls to the given section and slide anchors\\r\\n    */\\n\\n\\n    function scrollPageAndSlide(sectionAnchor, slideAnchor) {\\n      var section = getSectionByAnchor(sectionAnchor); //do nothing if there's no section with the given anchor name\\n\\n      if (section == null) return;\\n      var slide = getSlideByAnchor(slideAnchor, section); //we need to scroll to the section and then to the slide\\n\\n      if (getAnchor(section) !== lastScrolledDestiny && !hasClass(section, ACTIVE)) {\\n        scrollPage(section, function () {\\n          scrollSlider(slide);\\n        });\\n      } //if we were already in the section\\n      else {\\n          scrollSlider(slide);\\n        }\\n    }\\n    /**\\r\\n    * Scrolls the slider to the given slide destination for the given section\\r\\n    */\\n\\n\\n    function scrollSlider(slide) {\\n      if (slide != null) {\\n        landscapeScroll(closest(slide, SLIDES_WRAPPER_SEL), slide);\\n      }\\n    }\\n    /**\\r\\n    * Creates a landscape navigation bar with dots for horizontal sliders.\\r\\n    */\\n\\n\\n    function addSlidesNavigation(section, numSlides) {\\n      appendTo(createElementFromHTML('<div class=\\\"' + SLIDES_NAV + '\\\"><ul></ul></div>'), section);\\n      var nav = $(SLIDES_NAV_SEL, section)[0]; //top or bottom\\n\\n      addClass(nav, 'fp-' + options.slidesNavPosition);\\n\\n      for (var i = 0; i < numSlides; i++) {\\n        appendTo(createElementFromHTML('<li><a href=\\\"#\\\"><span class=\\\"fp-sr-only\\\">' + getBulletLinkName(i, 'Slide') + '</span><span></span></a></li>'), $('ul', nav)[0]);\\n      } //centering it\\n\\n\\n      css(nav, {\\n        'margin-left': '-' + nav.innerWidth / 2 + 'px'\\n      });\\n      addClass($('a', $('li', nav)[0]), ACTIVE);\\n    }\\n    /**\\r\\n    * Sets the state of the website depending on the active section/slide.\\r\\n    * It changes the URL hash when needed and updates the body class.\\r\\n    */\\n\\n\\n    function setState(slideIndex, slideAnchor, anchorLink, sectionIndex) {\\n      var sectionHash = '';\\n\\n      if (options.anchors.length && !options.lockAnchors) {\\n        //isn't it the first slide?\\n        if (slideIndex) {\\n          if (anchorLink != null) {\\n            sectionHash = anchorLink;\\n          } //slide without anchor link? We take the index instead.\\n\\n\\n          if (slideAnchor == null) {\\n            slideAnchor = slideIndex;\\n          }\\n\\n          lastScrolledSlide = slideAnchor;\\n          setUrlHash(sectionHash + '/' + slideAnchor); //first slide won't have slide anchor, just the section one\\n        } else if (slideIndex != null) {\\n          lastScrolledSlide = slideAnchor;\\n          setUrlHash(anchorLink);\\n        } //section without slides\\n        else {\\n            setUrlHash(anchorLink);\\n          }\\n      }\\n\\n      setBodyClass();\\n    }\\n    /**\\r\\n    * Sets the URL hash.\\r\\n    */\\n\\n\\n    function setUrlHash(url) {\\n      if (options.recordHistory) {\\n        location.hash = url;\\n      } else {\\n        //Mobile Chrome doesn't work the normal way, so... lets use HTML5 for phones :)\\n        if (isTouchDevice || isTouch) {\\n          window.history.replaceState(undefined, undefined, '#' + url);\\n        } else {\\n          var baseUrl = window.location.href.split('#')[0];\\n          window.location.replace(baseUrl + '#' + url);\\n        }\\n      }\\n    }\\n    /**\\r\\n    * Gets the anchor for the given slide / section. Its index will be used if there's none.\\r\\n    */\\n\\n\\n    function getAnchor(element) {\\n      if (!element) {\\n        return null;\\n      }\\n\\n      var anchor = element.getAttribute('data-anchor');\\n      var elementIndex = index(element); //Slide without anchor link? We take the index instead.\\n\\n      if (anchor == null) {\\n        anchor = elementIndex;\\n      }\\n\\n      return anchor;\\n    }\\n    /**\\r\\n    * Sets a class for the body of the page depending on the active section / slide\\r\\n    */\\n\\n\\n    function setBodyClass() {\\n      var section = $(SECTION_ACTIVE_SEL)[0];\\n      var slide = $(SLIDE_ACTIVE_SEL, section)[0];\\n      var sectionAnchor = getAnchor(section);\\n      var slideAnchor = getAnchor(slide);\\n      var text = String(sectionAnchor);\\n\\n      if (slide) {\\n        text = text + '-' + slideAnchor;\\n      } //changing slash for dash to make it a valid CSS style\\n\\n\\n      text = text.replace('/', '-').replace('#', ''); //removing previous anchor classes\\n\\n      var classRe = new RegExp('\\\\\\\\b\\\\\\\\s?' + VIEWING_PREFIX + '-[^\\\\\\\\s]+\\\\\\\\b', \\\"g\\\");\\n      $body.className = $body.className.replace(classRe, ''); //adding the current anchor\\n\\n      addClass($body, VIEWING_PREFIX + '-' + text);\\n    }\\n    /**\\r\\n    * Checks for translate3d support\\r\\n    * @return boolean\\r\\n    * http://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\\r\\n    */\\n\\n\\n    function support3d() {\\n      var el = document.createElement('p'),\\n          has3d,\\n          transforms = {\\n        'webkitTransform': '-webkit-transform',\\n        'OTransform': '-o-transform',\\n        'msTransform': '-ms-transform',\\n        'MozTransform': '-moz-transform',\\n        'transform': 'transform'\\n      }; //preventing the style p:empty{display: none;} from returning the wrong result\\n\\n      el.style.display = 'block'; // Add it to the body to get the computed style.\\n\\n      document.body.insertBefore(el, null);\\n\\n      for (var t in transforms) {\\n        if (el.style[t] !== undefined) {\\n          el.style[t] = 'translate3d(1px,1px,1px)';\\n          has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);\\n        }\\n      }\\n\\n      document.body.removeChild(el);\\n      return has3d !== undefined && has3d.length > 0 && has3d !== 'none';\\n    }\\n    /**\\r\\n    * Removes the auto scrolling action fired by the mouse wheel and trackpad.\\r\\n    * After this function is called, the mousewheel and trackpad movements won't scroll through sections.\\r\\n    */\\n\\n\\n    function removeMouseWheelHandler() {\\n      if (document.addEventListener) {\\n        document.removeEventListener('mousewheel', MouseWheelHandler, false); //IE9, Chrome, Safari, Oper\\n\\n        document.removeEventListener('wheel', MouseWheelHandler, false); //Firefox\\n\\n        document.removeEventListener('MozMousePixelScroll', MouseWheelHandler, false); //old Firefox\\n      } else {\\n        document.detachEvent('onmousewheel', MouseWheelHandler); //IE 6/7/8\\n      }\\n    }\\n    /**\\r\\n    * Adds the auto scrolling action for the mouse wheel and trackpad.\\r\\n    * After this function is called, the mousewheel and trackpad movements will scroll through sections\\r\\n    * https://developer.mozilla.org/en-US/docs/Web/Events/wheel\\r\\n    */\\n\\n\\n    function addMouseWheelHandler() {\\n      var prefix = '';\\n\\n      var _addEventListener;\\n\\n      if (window.addEventListener) {\\n        _addEventListener = \\\"addEventListener\\\";\\n      } else {\\n        _addEventListener = \\\"attachEvent\\\";\\n        prefix = 'on';\\n      } // detect available wheel event\\n\\n\\n      var support = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support \\\"wheel\\\"\\n      document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \\\"mousewheel\\\"\\n      'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\\n\\n      var passiveEvent = g_supportsPassive ? {\\n        passive: false\\n      } : false;\\n\\n      if (support == 'DOMMouseScroll') {\\n        document[_addEventListener](prefix + 'MozMousePixelScroll', MouseWheelHandler, passiveEvent);\\n      } //handle MozMousePixelScroll in older Firefox\\n      else {\\n          document[_addEventListener](prefix + support, MouseWheelHandler, passiveEvent);\\n        }\\n    }\\n    /**\\r\\n    * Binding the mousemove when the mouse's middle button is pressed\\r\\n    */\\n\\n\\n    function addMiddleWheelHandler() {\\n      container.addEventListener('mousedown', mouseDownHandler);\\n      container.addEventListener('mouseup', mouseUpHandler);\\n    }\\n    /**\\r\\n    * Unbinding the mousemove when the mouse's middle button is released\\r\\n    */\\n\\n\\n    function removeMiddleWheelHandler() {\\n      container.removeEventListener('mousedown', mouseDownHandler);\\n      container.removeEventListener('mouseup', mouseUpHandler);\\n    }\\n    /**\\r\\n    * Adds the possibility to auto scroll through sections on touch devices.\\r\\n    */\\n\\n\\n    function addTouchHandler() {\\n      if (isTouchDevice || isTouch) {\\n        if (options.autoScrolling) {\\n          $body.removeEventListener(events.touchmove, preventBouncing, {\\n            passive: false\\n          });\\n          $body.addEventListener(events.touchmove, preventBouncing, {\\n            passive: false\\n          });\\n        }\\n\\n        var touchWrapper = options.touchWrapper;\\n        touchWrapper.removeEventListener(events.touchstart, touchStartHandler);\\n        touchWrapper.removeEventListener(events.touchmove, touchMoveHandler, {\\n          passive: false\\n        });\\n        touchWrapper.addEventListener(events.touchstart, touchStartHandler);\\n        touchWrapper.addEventListener(events.touchmove, touchMoveHandler, {\\n          passive: false\\n        });\\n      }\\n    }\\n    /**\\r\\n    * Removes the auto scrolling for touch devices.\\r\\n    */\\n\\n\\n    function removeTouchHandler() {\\n      if (isTouchDevice || isTouch) {\\n        // normalScrollElements requires it off #2691\\n        if (options.autoScrolling) {\\n          $body.removeEventListener(events.touchmove, touchMoveHandler, {\\n            passive: false\\n          });\\n          $body.removeEventListener(events.touchmove, preventBouncing, {\\n            passive: false\\n          });\\n        }\\n\\n        var touchWrapper = options.touchWrapper;\\n        touchWrapper.removeEventListener(events.touchstart, touchStartHandler);\\n        touchWrapper.removeEventListener(events.touchmove, touchMoveHandler, {\\n          passive: false\\n        });\\n      }\\n    }\\n    /*\\r\\n    * Returns and object with Microsoft pointers (for IE<11 and for IE >= 11)\\r\\n    * http://msdn.microsoft.com/en-us/library/ie/dn304886(v=vs.85).aspx\\r\\n    */\\n\\n\\n    function getMSPointer() {\\n      var pointer; //IE >= 11 & rest of browsers\\n\\n      if (window.PointerEvent) {\\n        pointer = {\\n          down: 'pointerdown',\\n          move: 'pointermove'\\n        };\\n      } //IE < 11\\n      else {\\n          pointer = {\\n            down: 'MSPointerDown',\\n            move: 'MSPointerMove'\\n          };\\n        }\\n\\n      return pointer;\\n    }\\n    /**\\r\\n    * Gets the pageX and pageY properties depending on the browser.\\r\\n    * https://github.com/alvarotrigo/fullPage.js/issues/194#issuecomment-34069854\\r\\n    */\\n\\n\\n    function getEventsPage(e) {\\n      var events = [];\\n      events.y = typeof e.pageY !== 'undefined' && (e.pageY || e.pageX) ? e.pageY : e.touches[0].pageY;\\n      events.x = typeof e.pageX !== 'undefined' && (e.pageY || e.pageX) ? e.pageX : e.touches[0].pageX; //in touch devices with scrollBar:true, e.pageY is detected, but we have to deal with touch events. #1008\\n\\n      if (isTouch && isReallyTouch(e) && options.scrollBar && typeof e.touches !== 'undefined') {\\n        events.y = e.touches[0].pageY;\\n        events.x = e.touches[0].pageX;\\n      }\\n\\n      return events;\\n    }\\n    /**\\r\\n    * Slides silently (with no animation) the active slider to the given slide.\\r\\n    * @param noCallback {bool} true or defined -> no callbacks\\r\\n    */\\n\\n\\n    function silentLandscapeScroll(activeSlide, noCallbacks) {\\n      setScrollingSpeed(0, 'internal');\\n\\n      if (typeof noCallbacks !== 'undefined') {\\n        //preventing firing callbacks afterSlideLoad etc.\\n        isResizing = true;\\n      }\\n\\n      landscapeScroll(closest(activeSlide, SLIDES_WRAPPER_SEL), activeSlide);\\n\\n      if (typeof noCallbacks !== 'undefined') {\\n        isResizing = false;\\n      }\\n\\n      setScrollingSpeed(originals.scrollingSpeed, 'internal');\\n    }\\n    /**\\r\\n    * Scrolls silently (with no animation) the page to the given Y position.\\r\\n    */\\n\\n\\n    function silentScroll(top) {\\n      // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625\\n      // that's why we round it to 0.\\n      var roundedTop = Math.round(top);\\n\\n      if (options.css3 && options.autoScrolling && !options.scrollBar) {\\n        var translate3d = 'translate3d(0px, -' + roundedTop + 'px, 0px)';\\n        transformContainer(translate3d, false);\\n      } else if (options.autoScrolling && !options.scrollBar) {\\n        css(container, {\\n          'top': -roundedTop + 'px'\\n        });\\n        FP.test.top = -roundedTop + 'px';\\n      } else {\\n        var scrollSettings = getScrollSettings(roundedTop);\\n        setScrolling(scrollSettings.element, scrollSettings.options);\\n      }\\n    }\\n    /**\\r\\n    * Returns the cross-browser transform string.\\r\\n    */\\n\\n\\n    function getTransforms(translate3d) {\\n      return {\\n        '-webkit-transform': translate3d,\\n        '-moz-transform': translate3d,\\n        '-ms-transform': translate3d,\\n        'transform': translate3d\\n      };\\n    }\\n    /**\\r\\n    * Allowing or disallowing the mouse/swipe scroll in a given direction. (not for keyboard)\\r\\n    * @type  m (mouse) or k (keyboard)\\r\\n    */\\n\\n\\n    function setIsScrollAllowed(value, direction, type) {\\n      //up, down, left, right\\n      if (direction !== 'all') {\\n        isScrollAllowed[type][direction] = value;\\n      } //all directions?\\n      else {\\n          Object.keys(isScrollAllowed[type]).forEach(function (key) {\\n            isScrollAllowed[type][key] = value;\\n          });\\n        }\\n    }\\n    /*\\r\\n    * Destroys fullpage.js plugin events and optinally its html markup and styles\\r\\n    */\\n\\n\\n    function destroy(all) {\\n      setAutoScrolling(false, 'internal');\\n      setAllowScrolling(true);\\n      setMouseHijack(false);\\n      setKeyboardScrolling(false);\\n      addClass(container, DESTROYED);\\n      clearTimeout(afterSlideLoadsId);\\n      clearTimeout(afterSectionLoadsId);\\n      clearTimeout(resizeId);\\n      clearTimeout(scrollId);\\n      clearTimeout(scrollId2);\\n      window.removeEventListener('scroll', scrollHandler);\\n      window.removeEventListener('hashchange', hashChangeHandler);\\n      window.removeEventListener('resize', resizeHandler);\\n      document.removeEventListener('keydown', keydownHandler);\\n      document.removeEventListener('keyup', keyUpHandler);\\n      ['click', 'touchstart'].forEach(function (eventName) {\\n        document.removeEventListener(eventName, delegatedEvents);\\n      });\\n      ['mouseenter', 'touchstart', 'mouseleave', 'touchend'].forEach(function (eventName) {\\n        document.removeEventListener(eventName, onMouseEnterOrLeave, true); //true is required!\\n      });\\n      clearTimeout(afterSlideLoadsId);\\n      clearTimeout(afterSectionLoadsId); //lets make a mess!\\n\\n      if (all) {\\n        destroyStructure();\\n      }\\n    }\\n    /*\\r\\n    * Removes inline styles added by fullpage.js\\r\\n    */\\n\\n\\n    function destroyStructure() {\\n      //reseting the `top` or `translate` properties to 0\\n      silentScroll(0); //loading all the lazy load content\\n\\n      $('img[data-src], source[data-src], audio[data-src], iframe[data-src]', container).forEach(function (item) {\\n        setSrc(item, 'src');\\n      });\\n      $('img[data-srcset]').forEach(function (item) {\\n        setSrc(item, 'srcset');\\n      });\\n      remove($(SECTION_NAV_SEL + ', ' + SLIDES_NAV_SEL + ', ' + SLIDES_ARROW_SEL)); //removing inline styles\\n\\n      css($(SECTION_SEL), {\\n        'height': '',\\n        'background-color': '',\\n        'padding': ''\\n      });\\n      css($(SLIDE_SEL), {\\n        'width': ''\\n      });\\n      css(container, {\\n        'height': '',\\n        'position': '',\\n        '-ms-touch-action': '',\\n        'touch-action': ''\\n      });\\n      css($htmlBody, {\\n        'overflow': '',\\n        'height': ''\\n      }); // remove .fp-enabled class\\n\\n      removeClass($('html'), ENABLED); // remove .fp-responsive class\\n\\n      removeClass($body, RESPONSIVE); // remove all of the .fp-viewing- classes\\n\\n      $body.className.split(/\\\\s+/).forEach(function (className) {\\n        if (className.indexOf(VIEWING_PREFIX) === 0) {\\n          removeClass($body, className);\\n        }\\n      }); //removing added classes\\n\\n      $(SECTION_SEL + ', ' + SLIDE_SEL).forEach(function (item) {\\n        if (options.scrollOverflowHandler && options.scrollOverflow) {\\n          options.scrollOverflowHandler.remove(item);\\n        }\\n\\n        removeClass(item, TABLE + ' ' + ACTIVE + ' ' + COMPLETELY);\\n        var previousStyles = item.getAttribute('data-fp-styles');\\n\\n        if (previousStyles) {\\n          item.setAttribute('style', item.getAttribute('data-fp-styles'));\\n        } //removing anchors if they were not set using the HTML markup\\n\\n\\n        if (hasClass(item, SECTION) && !g_initialAnchorsInDom) {\\n          item.removeAttribute('data-anchor');\\n        }\\n      }); //removing the applied transition from the fullpage wrapper\\n\\n      removeAnimation(container); //Unwrapping content\\n\\n      [TABLE_CELL_SEL, SLIDES_CONTAINER_SEL, SLIDES_WRAPPER_SEL].forEach(function (selector) {\\n        $(selector, container).forEach(function (item) {\\n          //unwrap not being use in case there's no child element inside and its just text\\n          unwrap(item);\\n        });\\n      }); //removing the applied transition from the fullpage wrapper\\n\\n      css(container, {\\n        '-webkit-transition': 'none',\\n        'transition': 'none'\\n      }); //scrolling the page to the top with no animation\\n\\n      window.scrollTo(0, 0); //removing selectors\\n\\n      var usedSelectors = [SECTION, SLIDE, SLIDES_CONTAINER];\\n      usedSelectors.forEach(function (item) {\\n        removeClass($('.' + item), item);\\n      });\\n    }\\n    /*\\r\\n    * Sets the state for a variable with multiple states (original, and temporal)\\r\\n    * Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.\\r\\n    * This function is used to keep track of both states, the original and the temporal one.\\r\\n    * If type is not 'internal', then we assume the user is globally changing the variable.\\r\\n    */\\n\\n\\n    function setVariableState(variable, value, type) {\\n      options[variable] = value;\\n\\n      if (type !== 'internal') {\\n        originals[variable] = value;\\n      }\\n    }\\n    /**\\r\\n    * Displays warnings\\r\\n    */\\n\\n\\n    function displayWarnings() {\\n      var l = options['li' + 'c' + 'enseK' + 'e' + 'y'];\\n      var msgStyle = 'font-size: 15px;background:yellow;';\\n\\n      if (!isOK) {\\n        showError('error', 'Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:');\\n        showError('error', 'https://github.com/alvarotrigo/fullPage.js#options.');\\n      } else if (l && l.length < 20) {\\n        console.warn('%c This website was made using fullPage.js slider. More info on the following website:', msgStyle);\\n        console.warn('%c https://alvarotrigo.com/fullPage/', msgStyle);\\n      }\\n\\n      var extensions = ['fadingEffect', 'continuousHorizontal', 'scrollHorizontally', 'interlockedSlides', 'resetSliders', 'responsiveSlides', 'offsetSections', 'dragAndMove', 'scrollOverflowReset', 'parallax', 'cards'];\\n\\n      if (hasClass($('html'), ENABLED)) {\\n        showError('error', 'Fullpage.js can only be initialized once and you are doing it multiple times!');\\n        return;\\n      } // Disable mutually exclusive settings\\n\\n\\n      if (options.continuousVertical && (options.loopTop || options.loopBottom)) {\\n        options.continuousVertical = false;\\n        showError('warn', 'Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled');\\n      }\\n\\n      if (options.scrollOverflow && (options.scrollBar || !options.autoScrolling)) {\\n        showError('warn', 'Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox');\\n      }\\n\\n      if (options.continuousVertical && (options.scrollBar || !options.autoScrolling)) {\\n        options.continuousVertical = false;\\n        showError('warn', 'Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled');\\n      }\\n\\n      if (options.scrollOverflow && options.scrollOverflowHandler == null) {\\n        options.scrollOverflow = false;\\n        showError('error', 'The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.');\\n      } //using extensions? Wrong file!\\n\\n\\n      extensions.forEach(function (extension) {\\n        //is the option set to true?\\n        if (options[extension]) {\\n          showError('warn', 'fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: ' + extension);\\n        }\\n      }); //anchors can not have the same value as any element ID or NAME\\n\\n      options.anchors.forEach(function (name) {\\n        //case insensitive selectors (http://stackoverflow.com/a/19465187/1081396)\\n        var nameAttr = [].slice.call($('[name]')).filter(function (item) {\\n          return item.getAttribute('name') && item.getAttribute('name').toLowerCase() == name.toLowerCase();\\n        });\\n        var idAttr = [].slice.call($('[id]')).filter(function (item) {\\n          return item.getAttribute('id') && item.getAttribute('id').toLowerCase() == name.toLowerCase();\\n        });\\n\\n        if (idAttr.length || nameAttr.length) {\\n          showError('error', 'data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).');\\n\\n          if (idAttr.length) {\\n            showError('error', '\\\"' + name + '\\\" is is being used by another element `id` property');\\n          }\\n\\n          if (nameAttr.length) {\\n            showError('error', '\\\"' + name + '\\\" is is being used by another element `name` property');\\n          }\\n        }\\n      });\\n    }\\n    /**\\r\\n    * Getting the position of the element to scroll when using jQuery animations\\r\\n    */\\n\\n\\n    function getScrolledPosition(element) {\\n      var position; //is not the window element and is a slide?\\n\\n      if (element.self != window && hasClass(element, SLIDES_WRAPPER)) {\\n        position = element.scrollLeft;\\n      } else if (!options.autoScrolling || options.scrollBar) {\\n        position = getScrollTop();\\n      } else {\\n        position = element.offsetTop;\\n      } //gets the top property of the wrapper\\n\\n\\n      return position;\\n    }\\n    /**\\r\\n    * Simulates the animated scrollTop of jQuery. Used when css3:false or scrollBar:true or autoScrolling:false\\r\\n    * http://stackoverflow.com/a/16136789/1081396\\r\\n    */\\n\\n\\n    function scrollTo(element, to, duration, callback) {\\n      var start = getScrolledPosition(element);\\n      var change = to - start;\\n      var currentTime = 0;\\n      var increment = 20;\\n      activeAnimation = true;\\n\\n      var animateScroll = function () {\\n        if (activeAnimation) {\\n          //in order to stope it from other function whenever we want\\n          var val = to;\\n          currentTime += increment;\\n\\n          if (duration) {\\n            val = window.fp_easings[options.easing](currentTime, start, change, duration);\\n          }\\n\\n          setScrolling(element, val);\\n\\n          if (currentTime < duration) {\\n            setTimeout(animateScroll, increment);\\n          } else if (typeof callback !== 'undefined') {\\n            callback();\\n          }\\n        } else if (currentTime < duration) {\\n          callback();\\n        }\\n      };\\n\\n      animateScroll();\\n    }\\n    /**\\r\\n    * Scrolls the page / slider the given number of pixels.\\r\\n    * It will do it one or another way dependiong on the library's config.\\r\\n    */\\n\\n\\n    function setScrolling(element, val) {\\n      if (!options.autoScrolling || options.scrollBar || element.self != window && hasClass(element, SLIDES_WRAPPER)) {\\n        //scrolling horizontally through the slides?\\n        if (element.self != window && hasClass(element, SLIDES_WRAPPER)) {\\n          element.scrollLeft = val;\\n        } //vertical scroll\\n        else {\\n            element.scrollTo(0, val);\\n          }\\n      } else {\\n        element.style.top = val + 'px';\\n      }\\n    }\\n    /**\\r\\n    * Gets the active slide.\\r\\n    */\\n\\n\\n    function getActiveSlide() {\\n      var activeSlide = $(SLIDE_ACTIVE_SEL, $(SECTION_ACTIVE_SEL)[0])[0];\\n      return nullOrSlide(activeSlide);\\n    }\\n    /**\\r\\n    * Gets the active section.\\r\\n    */\\n\\n\\n    function getActiveSection() {\\n      return new Section($(SECTION_ACTIVE_SEL)[0]);\\n    }\\n    /**\\r\\n    * Item. Slide or Section objects share the same properties.\\r\\n    */\\n\\n\\n    function Item(el, selector) {\\n      this.anchor = el.getAttribute('data-anchor');\\n      this.item = el;\\n      this.index = index(el, selector);\\n      this.isLast = this.index === el.parentElement.querySelectorAll(selector).length - 1;\\n      this.isFirst = !this.index;\\n    }\\n    /**\\r\\n    * Section object\\r\\n    */\\n\\n\\n    function Section(el) {\\n      Item.call(this, el, SECTION_SEL);\\n    }\\n    /**\\r\\n    * Slide object\\r\\n    */\\n\\n\\n    function Slide(el) {\\n      Item.call(this, el, SLIDE_SEL);\\n    }\\n\\n    return FP;\\n  } //end of $.fn.fullpage\\n  //utils\\n\\n  /**\\r\\n  * Shows a message in the console of the given type.\\r\\n  */\\n\\n\\n  function showError(type, text) {\\n    window.console && window.console[type] && window.console[type]('fullPage: ' + text);\\n  }\\n  /**\\r\\n  * Equivalent or jQuery function $().\\r\\n  */\\n\\n\\n  function $(selector, context) {\\n    context = arguments.length > 1 ? context : document;\\n    return context ? context.querySelectorAll(selector) : null;\\n  }\\n  /**\\r\\n  * Extends a given Object properties and its childs.\\r\\n  */\\n\\n\\n  function deepExtend(out) {\\n    out = out || {};\\n\\n    for (var i = 1, len = arguments.length; i < len; ++i) {\\n      var obj = arguments[i];\\n\\n      if (!obj) {\\n        continue;\\n      }\\n\\n      for (var key in obj) {\\n        if (!obj.hasOwnProperty(key)) {\\n          continue;\\n        } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\\n\\n\\n        if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\\n          out[key] = deepExtend(out[key], obj[key]);\\n          continue;\\n        }\\n\\n        out[key] = obj[key];\\n      }\\n    }\\n\\n    return out;\\n  }\\n  /**\\r\\n  * Checks if the passed element contains the passed class.\\r\\n  */\\n\\n\\n  function hasClass(el, className) {\\n    if (el == null) {\\n      return false;\\n    }\\n\\n    if (el.classList) {\\n      return el.classList.contains(className);\\n    }\\n\\n    return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\\n  }\\n  /**\\r\\n  * Gets the window height. Crossbrowser.\\r\\n  */\\n\\n\\n  function getWindowHeight() {\\n    return 'innerHeight' in window ? window.innerHeight : document.documentElement.offsetHeight;\\n  }\\n  /**\\r\\n  * Set's the CSS properties for the passed item/s.\\r\\n  * @param {NodeList|HTMLElement} items\\r\\n  * @param {Object} props css properties and values.\\r\\n  */\\n\\n\\n  function css(items, props) {\\n    items = getList(items);\\n    var key;\\n\\n    for (key in props) {\\n      if (props.hasOwnProperty(key)) {\\n        if (key !== null) {\\n          for (var i = 0; i < items.length; i++) {\\n            var item = items[i];\\n            item.style[key] = props[key];\\n          }\\n        }\\n      }\\n    }\\n\\n    return items;\\n  }\\n  /**\\r\\n  * Generic function to get the previous or next element.\\r\\n  */\\n\\n\\n  function until(item, selector, fn) {\\n    var sibling = item[fn];\\n\\n    while (sibling && !matches(sibling, selector)) {\\n      sibling = sibling[fn];\\n    }\\n\\n    return sibling;\\n  }\\n  /**\\r\\n  * Gets the previous element to the passed element that matches the passed selector.\\r\\n  */\\n\\n\\n  function prevUntil(item, selector) {\\n    return until(item, selector, 'previousElementSibling');\\n  }\\n  /**\\r\\n  * Gets the next element to the passed element that matches the passed selector.\\r\\n  */\\n\\n\\n  function nextUntil(item, selector) {\\n    return until(item, selector, 'nextElementSibling');\\n  }\\n  /**\\r\\n  * Gets the previous element to the passed element.\\r\\n  */\\n\\n\\n  function prev(item) {\\n    return item.previousElementSibling;\\n  }\\n  /**\\r\\n  * Gets the next element to the passed element.\\r\\n  */\\n\\n\\n  function next(item) {\\n    return item.nextElementSibling;\\n  }\\n  /**\\r\\n  * Gets the last element from the passed list of elements.\\r\\n  */\\n\\n\\n  function last(item) {\\n    return item[item.length - 1];\\n  }\\n  /**\\r\\n  * Gets index from the passed element.\\r\\n  * @param {String} selector is optional.\\r\\n  */\\n\\n\\n  function index(item, selector) {\\n    item = isArrayOrList(item) ? item[0] : item;\\n    var children = selector != null ? $(selector, item.parentNode) : item.parentNode.childNodes;\\n    var num = 0;\\n\\n    for (var i = 0; i < children.length; i++) {\\n      if (children[i] == item) return num;\\n      if (children[i].nodeType == 1) num++;\\n    }\\n\\n    return -1;\\n  }\\n  /**\\r\\n  * Gets an iterable element for the passed element/s\\r\\n  */\\n\\n\\n  function getList(item) {\\n    return !isArrayOrList(item) ? [item] : item;\\n  }\\n  /**\\r\\n  * Adds the display=none property for the passed element/s\\r\\n  */\\n\\n\\n  function hide(el) {\\n    el = getList(el);\\n\\n    for (var i = 0; i < el.length; i++) {\\n      el[i].style.display = 'none';\\n    }\\n\\n    return el;\\n  }\\n  /**\\r\\n  * Adds the display=block property for the passed element/s\\r\\n  */\\n\\n\\n  function show(el) {\\n    el = getList(el);\\n\\n    for (var i = 0; i < el.length; i++) {\\n      el[i].style.display = 'block';\\n    }\\n\\n    return el;\\n  }\\n  /**\\r\\n  * Checks if the passed element is an iterable element or not\\r\\n  */\\n\\n\\n  function isArrayOrList(el) {\\n    return Object.prototype.toString.call(el) === '[object Array]' || Object.prototype.toString.call(el) === '[object NodeList]';\\n  }\\n  /**\\r\\n  * Adds the passed class to the passed element/s\\r\\n  */\\n\\n\\n  function addClass(el, className) {\\n    el = getList(el);\\n\\n    for (var i = 0; i < el.length; i++) {\\n      var item = el[i];\\n\\n      if (item.classList) {\\n        item.classList.add(className);\\n      } else {\\n        item.className += ' ' + className;\\n      }\\n    }\\n\\n    return el;\\n  }\\n  /**\\r\\n  * Removes the passed class to the passed element/s\\r\\n  * @param {String} `className` can be multiple classnames separated by whitespace\\r\\n  */\\n\\n\\n  function removeClass(el, className) {\\n    el = getList(el);\\n    var classNames = className.split(' ');\\n\\n    for (var a = 0; a < classNames.length; a++) {\\n      className = classNames[a];\\n\\n      for (var i = 0; i < el.length; i++) {\\n        var item = el[i];\\n\\n        if (item.classList) {\\n          item.classList.remove(className);\\n        } else {\\n          item.className = item.className.replace(new RegExp('(^|\\\\\\\\b)' + className.split(' ').join('|') + '(\\\\\\\\b|$)', 'gi'), ' ');\\n        }\\n      }\\n    }\\n\\n    return el;\\n  }\\n  /**\\r\\n  * Appends the given element ot the given parent.\\r\\n  */\\n\\n\\n  function appendTo(el, parent) {\\n    parent.appendChild(el);\\n  }\\n  /**\\r\\n  Usage:\\r\\n    var wrapper = document.createElement('div');\\r\\n  wrapper.className = 'fp-slides';\\r\\n  wrap($('.slide'), wrapper);\\r\\n    https://jsfiddle.net/qwzc7oy3/15/ (vanilla)\\r\\n  https://jsfiddle.net/oya6ndka/1/ (jquery equivalent)\\r\\n  */\\n\\n\\n  function wrap(toWrap, wrapper, isWrapAll) {\\n    var newParent;\\n    wrapper = wrapper || document.createElement('div');\\n\\n    for (var i = 0; i < toWrap.length; i++) {\\n      var item = toWrap[i];\\n\\n      if (isWrapAll && !i || !isWrapAll) {\\n        newParent = wrapper.cloneNode(true);\\n        item.parentNode.insertBefore(newParent, item);\\n      }\\n\\n      newParent.appendChild(item);\\n    }\\n\\n    return toWrap;\\n  }\\n  /**\\r\\n  Usage:\\r\\n  var wrapper = document.createElement('div');\\r\\n  wrapper.className = 'fp-slides';\\r\\n  wrap($('.slide'), wrapper);\\r\\n    https://jsfiddle.net/qwzc7oy3/27/ (vanilla)\\r\\n  https://jsfiddle.net/oya6ndka/4/ (jquery equivalent)\\r\\n  */\\n\\n\\n  function wrapAll(toWrap, wrapper) {\\n    wrap(toWrap, wrapper, true);\\n  }\\n  /**\\r\\n  * Usage:\\r\\n  * wrapInner(document.querySelector('#pepe'), '<div class=\\\"test\\\">afdas</div>');\\r\\n  * wrapInner(document.querySelector('#pepe'), element);\\r\\n  *\\r\\n  * https://jsfiddle.net/zexxz0tw/6/\\r\\n  *\\r\\n  * https://stackoverflow.com/a/21817590/1081396\\r\\n  */\\n\\n\\n  function wrapInner(parent, wrapper) {\\n    if (typeof wrapper === \\\"string\\\") {\\n      wrapper = createElementFromHTML(wrapper);\\n    }\\n\\n    parent.appendChild(wrapper);\\n\\n    while (parent.firstChild !== wrapper) {\\n      wrapper.appendChild(parent.firstChild);\\n    }\\n  }\\n  /**\\r\\n  * Usage:\\r\\n  * unwrap(document.querySelector('#pepe'));\\r\\n  * unwrap(element);\\r\\n  *\\r\\n  * https://jsfiddle.net/szjt0hxq/1/\\r\\n  *\\r\\n  */\\n\\n\\n  function unwrap(wrapper) {\\n    var wrapperContent = document.createDocumentFragment();\\n\\n    while (wrapper.firstChild) {\\n      wrapperContent.appendChild(wrapper.firstChild);\\n    }\\n\\n    wrapper.parentNode.replaceChild(wrapperContent, wrapper);\\n  }\\n  /**\\r\\n  * http://stackoverflow.com/questions/22100853/dom-pure-javascript-solution-to-jquery-closest-implementation\\r\\n  * Returns the element or `false` if there's none\\r\\n  */\\n\\n\\n  function closest(el, selector) {\\n    if (el && el.nodeType === 1) {\\n      if (matches(el, selector)) {\\n        return el;\\n      }\\n\\n      return closest(el.parentNode, selector);\\n    }\\n\\n    return null;\\n  }\\n  /**\\r\\n  * Places one element (rel) after another one or group of them (reference).\\r\\n  * @param {HTMLElement} reference\\r\\n  * @param {HTMLElement|NodeList|String} el\\r\\n  * https://jsfiddle.net/9s97hhzv/1/\\r\\n  */\\n\\n\\n  function after(reference, el) {\\n    insertBefore(reference, reference.nextSibling, el);\\n  }\\n  /**\\r\\n  * Places one element (rel) before another one or group of them (reference).\\r\\n  * @param {HTMLElement} reference\\r\\n  * @param {HTMLElement|NodeList|String} el\\r\\n  * https://jsfiddle.net/9s97hhzv/1/\\r\\n  */\\n\\n\\n  function before(reference, el) {\\n    insertBefore(reference, reference, el);\\n  }\\n  /**\\r\\n  * Based in https://stackoverflow.com/a/19316024/1081396\\r\\n  * and https://stackoverflow.com/a/4793630/1081396\\r\\n  */\\n\\n\\n  function insertBefore(reference, beforeElement, el) {\\n    if (!isArrayOrList(el)) {\\n      if (typeof el == 'string') {\\n        el = createElementFromHTML(el);\\n      }\\n\\n      el = [el];\\n    }\\n\\n    for (var i = 0; i < el.length; i++) {\\n      reference.parentNode.insertBefore(el[i], beforeElement);\\n    }\\n  } //http://stackoverflow.com/questions/3464876/javascript-get-window-x-y-position-for-scroll\\n\\n\\n  function getScrollTop() {\\n    var doc = document.documentElement;\\n    return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\\n  }\\n  /**\\r\\n  * Gets the siblings of the passed element\\r\\n  */\\n\\n\\n  function siblings(el) {\\n    return Array.prototype.filter.call(el.parentNode.children, function (child) {\\n      return child !== el;\\n    });\\n  } //for IE 9 ?\\n\\n\\n  function preventDefault(event) {\\n    if (event.preventDefault) {\\n      event.preventDefault();\\n    } else {\\n      event.returnValue = false;\\n    }\\n  }\\n  /**\\r\\n  * Determines whether the passed item is of function type.\\r\\n  */\\n\\n\\n  function isFunction(item) {\\n    if (typeof item === 'function') {\\n      return true;\\n    }\\n\\n    var type = Object.prototype.toString(item);\\n    return type === '[object Function]' || type === '[object GeneratorFunction]';\\n  }\\n  /**\\r\\n  * Trigger custom events\\r\\n  */\\n\\n\\n  function trigger(el, eventName, data) {\\n    var event;\\n    data = typeof data === 'undefined' ? {} : data; // Native\\n\\n    if (typeof window.CustomEvent === \\\"function\\\") {\\n      event = new CustomEvent(eventName, {\\n        detail: data\\n      });\\n    } else {\\n      event = document.createEvent('CustomEvent');\\n      event.initCustomEvent(eventName, true, true, data);\\n    }\\n\\n    el.dispatchEvent(event);\\n  }\\n  /**\\r\\n  * Polyfill of .matches()\\r\\n  */\\n\\n\\n  function matches(el, selector) {\\n    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\\n  }\\n  /**\\r\\n  * Toggles the visibility of the passed element el.\\r\\n  */\\n\\n\\n  function toggle(el, value) {\\n    if (typeof value === \\\"boolean\\\") {\\n      for (var i = 0; i < el.length; i++) {\\n        el[i].style.display = value ? 'block' : 'none';\\n      }\\n    } //we don't use it in other way, so no else :)\\n\\n\\n    return el;\\n  }\\n  /**\\r\\n  * Creates a HTMLElement from the passed HTML string.\\r\\n  * https://stackoverflow.com/a/494348/1081396\\r\\n  */\\n\\n\\n  function createElementFromHTML(htmlString) {\\n    var div = document.createElement('div');\\n    div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes\\n\\n    return div.firstChild;\\n  }\\n  /**\\r\\n  * Removes the passed item/s from the DOM.\\r\\n  */\\n\\n\\n  function remove(items) {\\n    items = getList(items);\\n\\n    for (var i = 0; i < items.length; i++) {\\n      var item = items[i];\\n\\n      if (item && item.parentElement) {\\n        item.parentNode.removeChild(item);\\n      }\\n    }\\n  }\\n  /**\\r\\n  * Filters an array by the passed filter funtion.\\r\\n  */\\n\\n\\n  function filter(el, filterFn) {\\n    Array.prototype.filter.call(el, filterFn);\\n  } //https://jsfiddle.net/w1rktecz/\\n\\n\\n  function untilAll(item, selector, fn) {\\n    var sibling = item[fn];\\n    var siblings = [];\\n\\n    while (sibling) {\\n      if (matches(sibling, selector) || selector == null) {\\n        siblings.push(sibling);\\n      }\\n\\n      sibling = sibling[fn];\\n    }\\n\\n    return siblings;\\n  }\\n  /**\\r\\n  * Gets all next elements matching the passed selector.\\r\\n  */\\n\\n\\n  function nextAll(item, selector) {\\n    return untilAll(item, selector, 'nextElementSibling');\\n  }\\n  /**\\r\\n  * Gets all previous elements matching the passed selector.\\r\\n  */\\n\\n\\n  function prevAll(item, selector) {\\n    return untilAll(item, selector, 'previousElementSibling');\\n  }\\n  /**\\r\\n  * Converts an object to an array.\\r\\n  */\\n\\n\\n  function toArray(objectData) {\\n    return Object.keys(objectData).map(function (key) {\\n      return objectData[key];\\n    });\\n  }\\n  /**\\r\\n  * forEach polyfill for IE\\r\\n  * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Browser_Compatibility\\r\\n  */\\n\\n\\n  if (window.NodeList && !NodeList.prototype.forEach) {\\n    NodeList.prototype.forEach = function (callback, thisArg) {\\n      thisArg = thisArg || window;\\n\\n      for (var i = 0; i < this.length; i++) {\\n        callback.call(thisArg, this[i], i, this);\\n      }\\n    };\\n  } //utils are public, so we can use it wherever we want\\n\\n\\n  window.fp_utils = {\\n    $: $,\\n    deepExtend: deepExtend,\\n    hasClass: hasClass,\\n    getWindowHeight: getWindowHeight,\\n    css: css,\\n    until: until,\\n    prevUntil: prevUntil,\\n    nextUntil: nextUntil,\\n    prev: prev,\\n    next: next,\\n    last: last,\\n    index: index,\\n    getList: getList,\\n    hide: hide,\\n    show: show,\\n    isArrayOrList: isArrayOrList,\\n    addClass: addClass,\\n    removeClass: removeClass,\\n    appendTo: appendTo,\\n    wrap: wrap,\\n    wrapAll: wrapAll,\\n    wrapInner: wrapInner,\\n    unwrap: unwrap,\\n    closest: closest,\\n    after: after,\\n    before: before,\\n    insertBefore: insertBefore,\\n    getScrollTop: getScrollTop,\\n    siblings: siblings,\\n    preventDefault: preventDefault,\\n    isFunction: isFunction,\\n    trigger: trigger,\\n    matches: matches,\\n    toggle: toggle,\\n    createElementFromHTML: createElementFromHTML,\\n    remove: remove,\\n    filter: filter,\\n    untilAll: untilAll,\\n    nextAll: nextAll,\\n    prevAll: prevAll,\\n    showError: showError\\n  };\\n  return initialise;\\n});\\n/**\\r\\n * jQuery adapter for fullPage.js 3.0.0\\r\\n */\\n\\n\\nif (window.jQuery && window.fullpage) {\\n  (function ($, fullpage) {\\n    'use strict'; // No jQuery No Go\\n\\n    if (!$ || !fullpage) {\\n      window.fp_utils.showError('error', 'jQuery is required to use the jQuery fullpage adapter!');\\n      return;\\n    }\\n\\n    $.fn.fullpage = function (options) {\\n      options.$ = $;\\n      new fullpage(this[0], options);\\n    };\\n  })(window.jQuery, window.fullpage);\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n\\n// CONCATENATED MODULE: ./src/some.js\\nfunction sum(...numbers) {\\n  let sum = 0;\\n\\n  for (let i = 0; i < numbers.length; i++) {\\n    sum += numbers[i];\\n  }\\n\\n  console.log('f');\\n  return sum;\\n}\\n\\nfunction avg(...numbers) {\\n  return sum(...numbers) / numbers.length;\\n}\\n\\n/* harmony default export */ var some = (avg);\\n// EXTERNAL MODULE: ./node_modules/fullpage.js/dist/fullpage.js\\nvar fullpage = __webpack_require__(0);\\n\\n// CONCATENATED MODULE: ./src/index.js\\n\\n // import $ from 'jquery';\\n// $('h2').html('Меняааааааа');\\n\\nconst factorial = n => {\\n  if (n === 1) {\\n    return 1;\\n  } else {\\n    return n * factorial(n - 1);\\n  }\\n};\\n\\nconsole.log(factorial(10));\\nconsole.log(some(11, 45, 78)); // new fullpage('#fullpage', {\\n// \\tautoScrolling:true,\\n// \\tscrollHorizontally: true\\n// });//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc29tZS5qcz9iN2IyIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz9iNjM1Il0sIm5hbWVzIjpbInN1bSIsIm51bWJlcnMiLCJpIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsImF2ZyIsImZhY3RvcmlhbCIsIm4iXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVNBLEdBQVQsQ0FBYSxHQUFHQyxPQUFoQixFQUF5QjtBQUN2QixNQUFJRCxHQUFHLEdBQUcsQ0FBVjs7QUFDQSxPQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE9BQU8sQ0FBQ0UsTUFBNUIsRUFBb0NELENBQUMsRUFBckMsRUFBeUM7QUFDdkNGLE9BQUcsSUFBR0MsT0FBTyxDQUFDQyxDQUFELENBQWI7QUFDRDs7QUFDRkUsU0FBTyxDQUFDQyxHQUFSLENBQVksR0FBWjtBQUNDLFNBQU9MLEdBQVA7QUFDRDs7QUFFRCxTQUFTTSxHQUFULENBQWEsR0FBR0wsT0FBaEIsRUFBd0I7QUFDdEIsU0FBT0QsR0FBRyxDQUFDLEdBQUdDLE9BQUosQ0FBSCxHQUFrQkEsT0FBTyxDQUFDRSxNQUFqQztBQUNEOztBQUVjRyw0Q0FBZixFOzs7OztBQ2JBO0NBRUE7QUFFQTs7QUFFQSxNQUFNQyxTQUFTLEdBQUlDLENBQUQsSUFBTztBQUNyQixNQUFJQSxDQUFDLEtBQUssQ0FBVixFQUFhO0FBQ1gsV0FBTyxDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0EsQ0FBQyxHQUFHRCxTQUFTLENBQUNDLENBQUMsR0FBRyxDQUFMLENBQXBCO0FBQ0Q7QUFDRixDQU5IOztBQU9BSixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsU0FBUyxDQUFDLEVBQUQsQ0FBckI7QUFFQUgsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQUcsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFRLEVBQVIsQ0FBZixFLENBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN1bSguLi5udW1iZXJzKSB7XG4gIGxldCBzdW0gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBzdW0gKz1udW1iZXJzW2ldXG4gIH1cbiBjb25zb2xlLmxvZygnZicpO1xuICByZXR1cm4gc3VtO1xufVxuXG5mdW5jdGlvbiBhdmcoLi4ubnVtYmVycyl7XG4gIHJldHVybiBzdW0oLi4ubnVtYmVycykgLyBudW1iZXJzLmxlbmd0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXZnO1xuXG4iLCJpbXBvcnQgYXZnIGZyb20gJy4vc29tZS5qcyc7XG5pbXBvcnQgZnVsbHBhZ2UgZnJvbSAnZnVsbHBhZ2UuanMnO1xuLy8gaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuLy8gJCgnaDInKS5odG1sKCfQnNC10L3Rj9Cw0LDQsNCw0LDQsNCwJyk7XG5cbmNvbnN0IGZhY3RvcmlhbCA9IChuKSA9PiB7XG4gICAgaWYgKG4gPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbiAqIGZhY3RvcmlhbChuIC0gMSk7XG4gICAgfVxuICB9XG5jb25zb2xlLmxvZyhmYWN0b3JpYWwoMTApKTsgXG5cbmNvbnNvbGUubG9nKGF2ZygxMSwgNDUsNzgpKTtcblxuLy8gbmV3IGZ1bGxwYWdlKCcjZnVsbHBhZ2UnLCB7XG4vLyBcdGF1dG9TY3JvbGxpbmc6dHJ1ZSxcbi8vIFx0c2Nyb2xsSG9yaXpvbnRhbGx5OiB0cnVlXG4vLyB9KTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")}]);","extractedComments":[]}